<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>uk.ac.diamond</groupId>
  <artifactId>daq-platform-products</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <parent>
    <groupId>uk.ac.diamond</groupId>
    <artifactId>daq-platform</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

	<!-- This pom contains specific steps to copy the built product outside of the Maven target directory
	into the standard location above workspace_git. The steps are:
	* Attach built product zip as artifact so it can be used in the Maven Dependency Plugin
	* Unzip the product in the location we want it
	* Run the linkrewrite script to fix up script links to the workspace
	* Recreate the symlink if desired

	Could be nicer to replace the first two steps with a single copy using the Maven Resources plugin but
	the current version does not preserve executable permissions (required on the product entry point) -->

	<profiles>
		<profile>
			<id>recreate-symlink</id>
			<build>
				<pluginManagement>
					<plugins>
						<!-- Update the symlink to point to new product -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>exec-maven-plugin</artifactId>
							<version>${exec.maven.plugin.version}</version>
							<executions>
								<execution>
									<id>recreate-symlink</id>
									<phase>verify</phase>
									<goals>
										<goal>exec</goal>
									</goals>
									<configuration>
										<executable>ln</executable>
										<arguments>
											<argument>-fnsv</argument>
											<argument>${server-product-root}</argument>
											<argument>${project.basedir}/../../../../server</argument>
										</arguments>
									</configuration>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

	<build>
		<!-- Main declaration and configuration for unzip and symlink of script folders
			Will be inherited by children but isn't added to their lifecycles (as it's
			pluginManagement) -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${maven.dependency.plugin.version}</version>
					<executions>
						<execution>
							<id>unzip-product</id>
							<phase>verify</phase>
							<goals>
								<goal>unpack</goal>
							</goals>
							<configuration>
								<artifactItems>
									<artifactItem>
										<groupId>${project.groupId}</groupId>
										<artifactId>${project.artifactId}</artifactId>
										<version>${project.version}</version>
										<type>zip</type>
										<classifier>gda-product-zip</classifier>
										<outputDirectory>${project.basedir}/../../../../${server-product-root}</outputDirectory>
									</artifactItem>
								</artifactItems>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- Add links back to the workspace for the script folders -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec.maven.plugin.version}</version>
					<executions>
						<execution>
							<id>link-script-projects</id>
							<phase>verify</phase>
							<goals>
								<goal>exec</goal>
							</goals>
							<configuration>
								<!-- set the working directory to the one containing this file and devlinks.py -->
								<workingDirectory>..</workingDirectory>
								<executable>python</executable>
								<arguments>
									<argument>./devlinks.py</argument>
									<argument>../../../${server-product-root}/plugins</argument>
								</arguments>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- This plugin doesn't cause errors so can just be configured here (i.e.
				can run for this parent pom) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build.helper.plugin.version}</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/products/${project.artifactId}-linux.gtk.x86_64.zip</file>
									<type>zip</type>
									<classifier>gda-product-zip</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- These two plugins shouldn't run for this parent pom but should run
				for all children (with config defined above in pluginManagement) -->
			<plugin>
				<!-- This declaration makes sure children get plugin in their lifecycle -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<!-- Configuration won't be propagated to children -->
				<inherited>false</inherited>
				<executions>
					<execution>
						<!--This matches and thus overrides execution defined in pluginManagement -->
						<id>unzip-product</id>
						<!-- Unbind from lifecycle for this POM -->
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>${exec.maven.plugin.version}</version>
				<inherited>false</inherited>
				<executions>
					<execution>
						<id>recreate-symlink</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>link-script-projects</id>
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>

