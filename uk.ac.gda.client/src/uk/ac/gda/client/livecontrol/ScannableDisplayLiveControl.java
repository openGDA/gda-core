/*-
 * Copyright Â© 2020 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.gda.client.livecontrol;

import java.util.Optional;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import gda.device.Scannable;
import gda.factory.Finder;
import gda.rcp.views.ScannableDisplayComposite;

public class ScannableDisplayLiveControl extends LiveControlBase {

	private static final Logger logger = LoggerFactory.getLogger(ScannableDisplayLiveControl.class);

	private String displayName;
	private String scannableName;
	private String userUnits;
	private int style = SWT.NONE;
	private int textWidth;
	private int labelTextSize = Display.getDefault().getSystemFont().getFontData()[0].getHeight();
	private int valueTextSize = Display.getDefault().getSystemFont().getFontData()[0].getHeight();
	private int valueColour = SWT.COLOR_BLACK;
	private int labelColour = SWT.COLOR_BLACK;
	private boolean boldValue = false;
	private boolean isTextInput;

	@Override
	public void createControl(Composite parent) {
		Optional<Scannable> optionalScannable = Finder.findOptionalOfType(getScannableName(), Scannable.class);
		if (!optionalScannable.isPresent()) {
			logger.warn("Could not get scannable '{}' for live control", getScannableName());
			return;
		}
		Scannable scannable = optionalScannable.get();

		ScannableDisplayComposite composite = new ScannableDisplayComposite(parent, getStyle());
		composite.setScannable(scannable);
		composite.setDisplayName(getDisplayName());
		composite.setTextWidth(getTextWidth());
		composite.setLabelSize(getLabelTextSize());
		composite.setValueSize(getValueTextSize());
		composite.setLabelColour(getLabelColour());
		composite.setValueColour(getValueColour());
		composite.setTextInput(isTextInput());
		composite.setValueBold(isBoldValue());

		if (getUserUnits() != null) {
			composite.setUserUnit(getUserUnits());
		}
	}

	public String getDisplayName() {
		return displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	public String getScannableName() {
		return scannableName;
	}

	public void setScannableName(String scannableName) {
		this.scannableName = scannableName;
	}

	public String getUserUnits() {
		return userUnits;
	}

	public void setUserUnits(String userUnits) {
		this.userUnits = userUnits;
	}

	public int getStyle() {
		return style;
	}

	public void setStyle(int style) {
		this.style = style;
	}

	public int getTextWidth() {
		return textWidth;
	}

	public void setTextWidth(int textWidth) {
		this.textWidth = textWidth;
	}

	public int getLabelTextSize() {
		return labelTextSize;
	}

	public void setLabelTextSize(int labelTextSize) {
		this.labelTextSize = labelTextSize;
	}

	public int getValueTextSize() {
		return valueTextSize;
	}

	public void setValueTextSize(int valueTextSize) {
		this.valueTextSize = valueTextSize;
	}

	public int getValueColour() {
		return valueColour;
	}

	public void setValueColour(int valueColour) {
		this.valueColour = valueColour;
	}

	public int getLabelColour() {
		return labelColour;
	}

	public void setLabelColuor(int setLabelColuor) {
		this.labelColour = setLabelColuor;
	}

	public boolean isTextInput() {
		return isTextInput;
	}

	public void setTextInput(boolean isTextInput) {
		this.isTextInput = isTextInput;
	}

	public boolean isBoldValue() {
		return boldValue;
	}

	public void setBoldValue(boolean boldLabel) {
		this.boldValue = boldLabel;
	}

	// Auto-generated by Eclipse
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + (boldValue ? 1231 : 1237);
		result = prime * result + ((displayName == null) ? 0 : displayName.hashCode());
		result = prime * result + (isTextInput ? 1231 : 1237);
		result = prime * result + labelColour;
		result = prime * result + labelTextSize;
		result = prime * result + ((scannableName == null) ? 0 : scannableName.hashCode());
		result = prime * result + style;
		result = prime * result + textWidth;
		result = prime * result + ((userUnits == null) ? 0 : userUnits.hashCode());
		result = prime * result + valueColour;
		result = prime * result + valueTextSize;
		return result;
	}

	// Auto-generated by Eclipse
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		ScannableDisplayLiveControl other = (ScannableDisplayLiveControl) obj;
		if (boldValue != other.boldValue)
			return false;
		if (displayName == null) {
			if (other.displayName != null)
				return false;
		} else if (!displayName.equals(other.displayName))
			return false;
		if (isTextInput != other.isTextInput)
			return false;
		if (labelColour != other.labelColour)
			return false;
		if (labelTextSize != other.labelTextSize)
			return false;
		if (scannableName == null) {
			if (other.scannableName != null)
				return false;
		} else if (!scannableName.equals(other.scannableName))
			return false;
		if (style != other.style)
			return false;
		if (textWidth != other.textWidth)
			return false;
		if (userUnits == null) {
			if (other.userUnits != null)
				return false;
		} else if (!userUnits.equals(other.userUnits))
			return false;
		if (valueColour != other.valueColour)
			return false;

		return (valueTextSize == other.valueTextSize);
	}
}
