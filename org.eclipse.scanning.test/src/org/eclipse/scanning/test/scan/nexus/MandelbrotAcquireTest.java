/*-
 *******************************************************************************
 * Copyright (c) 2011, 2016 Diamond Light Source Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Matthew Gerring - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.scanning.test.scan.nexus;

import static org.eclipse.dawnsci.nexus.test.utilities.NexusAssert.assertAxes;
import static org.eclipse.dawnsci.nexus.test.utilities.NexusAssert.assertDiamondScanGroup;
import static org.eclipse.dawnsci.nexus.test.utilities.NexusAssert.assertNXentryMetadata;
import static org.eclipse.dawnsci.nexus.test.utilities.NexusAssert.assertSignal;
import static org.eclipse.dawnsci.nexus.test.utilities.NexusAssert.assertTarget;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.nullValue;
import static org.junit.Assert.assertEquals;

import java.io.File;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.eclipse.dawnsci.analysis.api.tree.DataNode;
import org.eclipse.dawnsci.nexus.NXdata;
import org.eclipse.dawnsci.nexus.NXdetector;
import org.eclipse.dawnsci.nexus.NXentry;
import org.eclipse.dawnsci.nexus.NXinstrument;
import org.eclipse.dawnsci.nexus.NXroot;
import org.eclipse.january.dataset.IDataset;
import org.eclipse.january.dataset.PositionIterator;
import org.eclipse.scanning.api.device.AbstractRunnableDevice;
import org.eclipse.scanning.api.device.IRunnableDevice;
import org.eclipse.scanning.api.device.IRunnableEventDevice;
import org.eclipse.scanning.api.device.IWritableDetector;
import org.eclipse.scanning.api.event.scan.DeviceState;
import org.eclipse.scanning.api.points.IPointGenerator;
import org.eclipse.scanning.api.points.models.StaticModel;
import org.eclipse.scanning.api.scan.event.IRunListener;
import org.eclipse.scanning.api.scan.models.ScanModel;
import org.eclipse.scanning.example.detector.MandelbrotModel;
import org.eclipse.scanning.test.util.TestDetectorHelpers;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;

public class MandelbrotAcquireTest extends NexusTest {

	private static IWritableDetector<MandelbrotModel> detector;

	@Before
	public void before() throws Exception {
		final MandelbrotModel model = createMandelbrotModel();
		detector = TestDetectorHelpers.createAndConfigureMandelbrotDetector(model);
		assertThat(detector, is(notNullValue()));
	}

	@Test
	public void testAcquire() throws Exception {
		IRunnableDevice<ScanModel> scanner = createAcquireScan(detector, output);
		scanner.run(null);

		checkNexusFile(scanner);
	}

	private void checkNexusFile(IRunnableDevice<ScanModel> scanner) throws Exception {
		final ScanModel scanModel = ((AbstractRunnableDevice<ScanModel>) scanner).getModel();
		assertEquals(DeviceState.ARMED, scanner.getDeviceState());

		final NXroot rootNode = getNexusRoot(scanner);
		final NXentry entry = rootNode.getEntry();
		final NXinstrument instrument = entry.getInstrument();

		assertNXentryMetadata(entry);
		assertDiamondScanGroup(entry, false, false);

		final LinkedHashMap<String, List<String>> signalFieldAxes = new LinkedHashMap<>();
		// axis for additional dimensions of a datafield, e.g. image
		// note all dataset have additional first dimension of size 1. This is added by the
		// the jython static generator due to the limitiations of area detector
		signalFieldAxes.put(NXdetector.NX_DATA, Arrays.asList(".", "real", "imaginary"));
		signalFieldAxes.put("spectrum", Arrays.asList(".", "spectrum_axis"));
		signalFieldAxes.put("value", Arrays.asList("."));

		final String detectorName = scanModel.getDetectors().get(0).getName();
		final NXdetector detector = instrument.getDetector(detectorName);
		// map of detector data field to name of nxData group where that field is the @signal field
		final Map<String, String> expectedDataGroupNames =
				signalFieldAxes.keySet().stream().collect(Collectors.toMap(Function.identity(),
				x -> detectorName + (x.equals(NXdetector.NX_DATA) ? "" : "_" + x)));

		// validate the main NXdata generated by the NexusDataBuilder
		final Map<String, NXdata> nxDataGroups = entry.getChildren(NXdata.class);
		assertThat(nxDataGroups.size(), is(signalFieldAxes.size()));
		assertThat(nxDataGroups.keySet(), containsInAnyOrder(expectedDataGroupNames.values().toArray(String[]::new)));
		for (String nxDataGroupName : nxDataGroups.keySet()) {
			final NXdata nxData = entry.getData(nxDataGroupName);

			final String sourceFieldName = nxDataGroupName.equals(detectorName) ? NXdetector.NX_DATA :
				nxDataGroupName.substring(nxDataGroupName.indexOf('_') + 1);
			assertSignal(nxData, sourceFieldName);
			// check the nxData's signal field is a link to the appropriate source data node of the detector
			final DataNode dataNode = detector.getDataNode(sourceFieldName);
			final IDataset dataset = dataNode.getDataset().getSlice();
			assertThat(nxData.getDataNode(sourceFieldName), is(Matchers.sameInstance(dataNode)));
			assertTarget(nxData, sourceFieldName, rootNode, "/entry/instrument/" + detectorName
					+ "/" + sourceFieldName);

			// check that the other primary data fields of the detector haven't been added to this NXdata
			for (String primaryDataFieldName : signalFieldAxes.keySet()) {
				if (!primaryDataFieldName.equals(sourceFieldName)) {
					assertThat(nxData.getDataNode(primaryDataFieldName), is(nullValue()));
				}
			}

			final int[] shape = dataset.getShape();

			// Make sure none of the numbers are NaNs. The detector
			// is expected to fill this scan with non-nulls.
			final PositionIterator it = new PositionIterator(shape);
			while (it.hasNext()) {
				int[] next = it.getPos();
				assertThat(Double.isNaN(dataset.getDouble(next)), is(false));
			}

			// Check axes
			final List<String> expectedAxesNames = signalFieldAxes.get(sourceFieldName);
			assertAxes(nxData, expectedAxesNames.toArray(new String[expectedAxesNames.size()]));
		}
	}

	private IRunnableDevice<ScanModel> createAcquireScan(final IRunnableDevice<MandelbrotModel> detector, File file) throws Exception {
		final StaticModel emptyModel = new StaticModel();
		final IPointGenerator<StaticModel> gen = pointGenService.createGenerator(emptyModel);

		// Create the model for an acquire scan
		final ScanModel scanModel = new ScanModel();
		scanModel.setDetector(detector);

		// Create a file to scan into.
		scanModel.setFilePath(file.getAbsolutePath());
		scanModel.setPointGenerator(gen);
		scanModel.setScanPathModel(emptyModel);
		System.out.println("File writing to "+scanModel.getFilePath());

		// Create a scan and run it without publishing events
		final IRunnableDevice<ScanModel> scanner = scanService.createScanDevice(scanModel);

		((IRunnableEventDevice<ScanModel>)scanner).addRunListener(IRunListener.createRunWillPerformListener(
				event -> System.out.println("Running acquire scan for detector " + detector.getName())));

		return scanner;
	}

}
