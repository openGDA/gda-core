# test version of a file originally located at configurations/diamond/mx-config/scripts/AdvancedOptions.py
# this file is never run, it's just passed through the translator to test the translator

import sys
import time
import os

import gda.px.util.SavePNGPlot.save
from gda.util.userOptions.UserOptions import getUserOptionsFromConfig
from uk.ac.diamond.daq.persistence.jythonshelf import LocalParameters
from gda.util import QuantityFactory, ElogEntry
from gda.factory import Finder
from gda.analysis import DataSet, Plotter, Fitter, ScanFileHolder
from gda.analysis.utils import GeneticAlg
# epg 11/6/10 from gda.analysis.functions import StraightLine
from gda.configuration.properties import LocalProperties
from gda.util import VisitPath
from gda.epics import CAClient
from gda.px.bcm import BCMFinder
from gda.jython.commands.InputCommands import requestInput
from gda.jython import ScriptBase
from gda.images.camera import BeamDataComponent
from gda.px.sampleChanger import ManualCentreRequest, SampleChangerStateMonitor
from gda.px import MxProperties
from gdascripts.messages import handle_messages
from gda.jython import InterfaceProvider

beamline = LocalProperties.get("gda.epics.beamline.name")  
Beamline = LocalProperties.get("gda.beamline.name")        
BEAMLINE = "BL"+Beamline.upper()                           
frontend = "FE"+beamline[2:5]                              
directory = VisitPath.getVisitPath()+"/"
ca=CAClient()
sampleChanger = BCMFinder.getSampleChanger()

import goToPeak
import beamLineEnergy
import Attenuator
import SampleChangerLoadApprover
from hutch_utilities import activateHutch
import BeamlineParameters
from BeamlineParameters import JythonNameSpaceMapping
from dna.xml import Sample_reference
from sample_control import changeSample, enableSampleChanger, unloadSample, centrelid
import CreateSampleImages

scriptAction=Finder.find(LocalProperties.get(MxProperties.GDA_SAMPLECONTROLSCRIPT_ACTION))
scriptState=Finder.find(LocalProperties.get(MxProperties.GDA_HUTCHUTILSSCRIPT_STATE))
activeDataCollectionScript=Finder.find(LocalProperties.get(MxProperties.GDA_DATACOLLECTION_SCRIPT))
scriptController=Finder.find(LocalProperties.get(MxProperties.GDA_MX_SAMPLE_CHANGER_SCRIPT_CONTROLLER))

def incScriptState():
	val = int(scriptState())
	scriptState.moveTo(int(val+1))
	
def decScriptState():
	val = int(scriptState())
	scriptState.moveTo(int(val-1))

def setActiveScript(scriptName):
	activeDataCollectionScript.moveTo(scriptName)

def log(message):
	handle_messages.log(scriptController,message)

beamLineMap = BeamlineParameters.Parameters()
from org.slf4j import LoggerFactory
logger = LoggerFactory.getLogger("Advanced Options")

s1_xsize = JythonNameSpaceMapping().S1XGAP
s1_ysize = JythonNameSpaceMapping().S1YGAP
s1_xcentre = JythonNameSpaceMapping().S1XCENTRE
s1_ycentre = JythonNameSpaceMapping().S1YCENTRE
s4_xsize = Finder.find("s4_xsize")
s4_ysize = Finder.find("s4_ysize")
gonp = Finder.find("gonp")
gony = Finder.find("gony")
detz = JythonNameSpaceMapping().detz
detx = JythonNameSpaceMapping().detx
detyaw = JythonNameSpaceMapping().detyaw
dety = JythonNameSpaceMapping().dety
energy = JythonNameSpaceMapping().BeamLineEnergy_eV()
bsy = JythonNameSpaceMapping().bsy
expt_shutter = JythonNameSpaceMapping().expt_shutter
i_pin = JythonNameSpaceMapping().i_pin
sample_shutter = JythonNameSpaceMapping().sample_shutter
col_y = JythonNameSpaceMapping().col_y
col_x2 = JythonNameSpaceMapping().col_x2
qbpm1 = JythonNameSpaceMapping().qbpm1
qbpm2 = JythonNameSpaceMapping().qbpm2
qbpm3 = JythonNameSpaceMapping().qbpm3
qbpm4 = JythonNameSpaceMapping().qbpm4
i0 = JythonNameSpaceMapping().i0
DCM_Bragg = JythonNameSpaceMapping().DCM_Bragg
DCM_Pitch = JythonNameSpaceMapping().DCM_Pitch
DCM_Roll = JythonNameSpaceMapping().DCM_Roll
Undulator_Gap = JythonNameSpaceMapping().Undulator_Gap
energyToQBPM1_converter=Finder.find("energyToQBPM1_converter")
energyToQBPM2_converter=Finder.find("energyToQBPM2_converter")
energyToQBPM3_converter=Finder.find("energyToQBPM3_converter")
energyToQBPM4_converter=Finder.find("energyToQBPM4_converter")
scriptcontroller=Finder.find("samplechangerController")

#beamlineParameters values
MinIPin = float(beamLineMap.MinIPin)
RotationAxisPin = beamLineMap.RotationAxisPin
YAGPin = beamLineMap.YAGPin
PtPin = beamLineMap.PtPin
PowderPin = beamLineMap.PowderPin
FemtoInDetX = float(beamLineMap.FemtoInDetX)
FemtoInDetYaw = float(beamLineMap.FemtoInDetYaw)
FemtoInDetY = float(beamLineMap.FemtoInDetY)
FemtoInDetZ = float(beamLineMap.FemtoInDetZ)
DataCollectionDetX = float(beamLineMap.DataCollectionDetX)
DataCollectionDetYaw = float(beamLineMap.DataCollectionDetYaw)
DataCollectionDetY = float(beamLineMap.DataCollectionDetY)
StandardEnergy=float(beamLineMap.StandardEnergy)

def getAdvancedOption(key, default):
	options = getUserOptionsFromConfig("/dls_sw/"+Beamline+"/software/gda/config/xml","AdvancedOptionsTemplate","/dls_sw/"+Beamline+"/software/gda/config/xml","AdvancedOptions")
	if options.containsKey(key):
		return options.get(key).value
	else:
		return default

def isLoadYAG():
	return getAdvancedOption("1LoadYAG", False)
def isOptimiseBeam():
	return getAdvancedOption("2OptimiseBeam", False)
def isMeasureFlux():
	return getAdvancedOption("3MeasureFlux", False)
def isMoveFemtoIn():
	return getAdvancedOption("3aFemtoIn", False)
def isScanVerticalBeamProfile():
	return getAdvancedOption("4ScanVerticalBeamProfile", False)
def isScanHorizontalBeamProfile():
	return getAdvancedOption("5ScanHorizontalBeamProfile", False)
def isLoadRotationAxisPin():
	return getAdvancedOption("6LoadRotationAxisPin", False)
def isMoveFemtoOut():
	return getAdvancedOption("6aFemtoOut", False)
def isQuickRobotTest():
	return getAdvancedOption("7QuickRobotTest", False)
def isCalibrateDCM():
	return getAdvancedOption("8CalibrateDCM", False)

def amIBatonHolder():
	print InterfaceProvider.getBatonStateProvider().amIBatonHolder()

def go():
	
	
	#	load powder, take image(s), run 'powder' ??
	
	

	ScriptBase.setInterrupted(False)
	ScriptBase.setPaused(False)
	setActiveScript("AdvancedOptions")
	incScriptState()

	try:

		logText = ""
		fileLocations = []
		FemtoIn = 0
		KeepFemtoIn = 0
		HutchActive = 0
		YAGDown = 0
	
		
		if isLoadYAG() or isOptimiseBeam() or isMeasureFlux() or isScanVerticalBeamProfile() or isScanHorizontalBeamProfile() or isLoadRotationAxisPin() or isQuickRobotTest():
			if not SampleChangerLoadApprover.SampleChangerLoadApprover().hutchInterlocked():
				logger.error("Hutch not interlocked")
				return "Hutch not interlocked."
	
		
		if isOptimiseBeam() or isMeasureFlux() or isScanVerticalBeamProfile() or isScanHorizontalBeamProfile():
			shutterMonitorName = LocalProperties.get("gda.mx.exptShutter")
			shutterPositioner = Finder.find(shutterMonitorName)
			if shutterPositioner.getPosition() == "Closed":
				print "Opening Experimental shutter"
				shutterPositioner.moveTo("Reset")
				time.sleep(0.5)
				shutterPositioner.moveTo("Open")
	
		
		if isOptimiseBeam() or isScanVerticalBeamProfile() or isScanHorizontalBeamProfile():
			if Attenuator.getCurrentTransmission() != 1.0:
				Attenuator.setAttenuatorUsingCurrentEnergy(1)
	
		
		if isLoadYAG() or isLoadRotationAxisPin() or isQuickRobotTest():
			if sampleChanger.isEnabled() == 0:
				enableSampleChanger()
			else:
				centrelid(0)
		#	Check what's mounted - no longer needed.
		
		#		print "Nothing is currently mounted on the goniometer."
		
		#		print "Currently pin " + str(sampleChanger.getHolder()), str(sampleChanger.getSample()) + " is mounted."
		#	correct = requestInput("Correct? (y/n)")
		#	if correct != "y":
		#		return "Exiting..."
	
		
		if isLoadYAG():
			print "Loading YAG Screen..."
			newLogText = LoadYAG()
			HutchActive=1
			logText = logText + "<p>" + newLogText + "</p>"
	
		if isOptimiseBeam():
			print "Optimising Beam..."
			if HutchActive==0:
				activateHutch(0,0)
				HutchActive=1
			newLogText, newFileLocations = optimiseBeam()
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		if isMoveFemtoIn():
			print "Moving Femto In"
			if FemtoIn==0:
				MoveFemtoIn()
				FemtoIn=1
				KeepFemtoIn=1
	
		if isMeasureFlux():
			if isLoadYAG() and YAGDown==0:
				print "Moving YAG down by 2mm..."
				gony(gony()-2)
				YAGDown=1
			if FemtoIn==0:
				MoveFemtoIn()
				FemtoIn=1
			if HutchActive==0:
				activateHutch(0,0)
				HutchActive=1
			newLogText, newFileLocations = MeasureFlux()
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		if isScanVerticalBeamProfile():
			if isLoadYAG() and YAGDown==0:
				print "Moving YAG down by 2mm..."
				gony(gony()-2)
				YAGDown=1
			if FemtoIn==0:
				MoveFemtoIn()
				FemtoIn=1
			if HutchActive==0:
				activateHutch(0,0)
				HutchActive=1
			newLogText, newFileLocations = ScanVerticalBeamProfile()
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		if isScanHorizontalBeamProfile():
			if isLoadYAG() and YAGDown==0:
				print "Moving YAG down by 2mm..."
				gony(gony()-2)
				YAGDown=1
			if FemtoIn==0:
				MoveFemtoIn()
				FemtoIn=1
			if HutchActive==0:
				activateHutch(0,0)
				HutchActive=1
			newLogText, newFileLocations = ScanHorizontalBeamProfile()
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		if YAGDown==1:
			print "Moving YAG back up by 2mm..."
			gony(gony()+2)
			YAGDown=0
	
		if isMoveFemtoOut():
			print "Moving Femto Out"
	
			MoveFemtoOut()
			FemtoIn=0
	
		if FemtoIn==1 and KeepFemtoIn==0:
			MoveFemtoOut()
			FemtoIn=0
	
		if isLoadRotationAxisPin():
			print "Loading rotation axis pin"
			newLogText, newFileLocations = LoadRotationAxisPin()
			HutchActive=1
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		if isQuickRobotTest():
			print "Performing Quick Robot Test"
			print "Pucks 1-5, Pins 1,3,8,12,15"
			newLogText = quickRobotTest()
			logText = logText + "<p>" + newLogText + "</p>"
	
		if isCalibrateDCM():
			print "Calibrating DCM..."
			newLogText, newFileLocations = calibrateDCM()
			logText = logText + "<p>" + newLogText + "</p>"
			fileLocations.extend(newFileLocations)
	
		
		if (abs(detx()-DataCollectionDetX) > 0.1) and (abs(detx()-FemtoInDetX) > 0.1):
			logText = logText + "<p>Detector X is at " + str(round(detx(),2)) + ", expected value " + str(round(DataCollectionDetX,2)) + "</p>"
		if (abs(detyaw()-DataCollectionDetYaw) > 0.1) and (abs(detyaw()-FemtoInDetYaw) > 0.1):
			logText = logText + "<p>Detector Yaw is at " + str(round(detyaw(),2)) + ", expected value " + str(round(DataCollectionDetYaw,2)) + "</p>"
		if (abs(dety()-DataCollectionDetY) > 0.1) and (abs(dety()-FemtoInDetY) > 0.1):
			logText = logText + "<p>Detector Y is at " + str(round(dety(),2)) + ", expected value " + str(round(DataCollectionDetY,2)) + "</p>"
	
		
		if logText != "":
			
			logText = "<p>Ring Current: " + str(round(JythonNameSpaceMapping().ringCurrent(),3)) + " mA</p>" + logText
			logText = logText + "<p>To run this script, select from Control Panel -&gt; Advanced Options, then type 'AdvancedOptions.go()' in the Jython Terminal.</p>"
			title = "Auto beamline setup: "+Beamline
			content = "<b>Auto beamline setup:</b> " + logText
			userID = "gda"
			visit = None
			logID = BEAMLINE
			groupID = BEAMLINE
			ElogEntry.postAsyn(title,content,userID,visit,logID,groupID,fileLocations)
		print "success"
		logger.info("completed successfully")
	except :
		exceptionType, exception, traceback = sys.exc_info()
		handle_messages.log( None, "AdvancedOptions Go failed: ", exceptionType, exception , traceback, False)

	finally:
		decScriptState()
		setActiveScript("")

def optimiseBeam():
	startscan = getScanNumber()
	s4_orig_x = s4_xsize()
	s4_orig_y = s4_ysize()
	JythonNameSpaceMapping().beamline_optimiser_auto('off')
	bl = beamLineEnergy.beamLineEnergy()
	bl(StandardEnergy)
	bl.align_beam_worker()
	JythonNameSpaceMapping().beamline_optimiser_auto('on')
	energyEV = QuantityFactory.createFromObject(energy, QuantityFactory.createUnitFromString("eV"))
	f=open("/home/" + Beamline + "user/scripts/qbpms.txt","a")
	f.write(time.strftime("%Y%m%d %H%M") + " " + str(round(energy,1)) + "eV " + str(round(JythonNameSpaceMapping().ringCurrent(),3)) + "mA\n")
	f.write("QBPM1: " + str(round(qbpm1(),4)) + "\n")
	f.write("QBPM2: " + str(round(qbpm2(),4)) + "\n")
	f.write("QBPM3: " + str(round(qbpm3(),4)) + "\n")
	f.write("QBPM4: " + str(round(qbpm4(),4)) + "\n")
	f.close()
	qbpm1av = qbpmAverage("QBPM1")
	qbpm2av = qbpmAverage("QBPM2")
	qbpm3av = qbpmAverage("QBPM3")
	qbpm4av = qbpmAverage("QBPM4")
	
	minqbpm1=energyToQBPM1_converter.toTarget(energyEV)
	actualqbpm1 = QuantityFactory.createFromObject(qbpm1(), QuantityFactory.createUnitFromString(qbpm1.getUnit()))
	if actualqbpm1.isLessThan(minqbpm1):
		q1 = "<SPAN style='BACKGROUND-COLOR: #ff0000'>"+str(actualqbpm1)+"</SPAN>, should be &gt; "+str(minqbpm1) + " (Average value " + qbpm1av + ")"
	else:
		q1 = str(actualqbpm1) + " (Average value " + qbpm1av + ")"
	minqbpm2=energyToQBPM2_converter.toTarget(energyEV)
	actualqbpm2 = QuantityFactory.createFromObject(qbpm2(), QuantityFactory.createUnitFromString(qbpm2.getUnit()))
	if actualqbpm2.isLessThan(minqbpm2):
		q2 = "<SPAN style='BACKGROUND-COLOR: #ff0000'>"+str(actualqbpm2)+"</SPAN>, should be &gt; "+str(minqbpm2) + " (Average value " + qbpm2av + ")"
	else:
		q2 = str(actualqbpm2) + " (Average value " + qbpm2av + ")"
	minqbpm3=energyToQBPM3_converter.toTarget(energyEV)
	actualqbpm3 = QuantityFactory.createFromObject(qbpm3(), QuantityFactory.createUnitFromString(qbpm3.getUnit()))
	if actualqbpm3.isLessThan(minqbpm3):
		q3 = "<SPAN style='BACKGROUND-COLOR: #ff0000'>"+str(actualqbpm3)+"</SPAN>, should be &gt; "+str(minqbpm3) + " (Average value " + qbpm3av + ")"
	else:
		q3 = str(actualqbpm3) + " (Average value " + qbpm3av + ")"
	minqbpm4=energyToQBPM4_converter.toTarget(energyEV)
	actualqbpm4 = QuantityFactory.createFromObject(qbpm4(), QuantityFactory.createUnitFromString(qbpm4.getUnit()))
	if actualqbpm4.isLessThan(minqbpm4):
		q4 = "<SPAN style='BACKGROUND-COLOR: #ff0000'>"+str(actualqbpm4)+"</SPAN>, should be &gt; "+str(minqbpm4) + " (Average value " + qbpm4av + ")"
	else:
		q4 = str(actualqbpm4) + " (Average value " + qbpm4av + ")"
	
	endscan = getScanNumber()
	files=[]
	for i in range(startscan+1, endscan+1):
		try:
			sfh = ScanFileHolder()
			sfh.loadSRS(directory + str(i) + ".dat")
			png=SavePNG(directory+str(i)+".png",sfh,"Align Beam Scan "+str(i-startscan))
			files.extend([png])
		except:
			pass
	
	ScreenGrabFile1,ScreenGrabFile2,ScreenGrabFile3=takeThreeScreenGrabs()
	files.extend([ScreenGrabFile1,ScreenGrabFile2,ScreenGrabFile3])
	sample_shutter('CLOSE')
	Attenuator.setAttenuatorUsingCurrentEnergy(1.0)
	s4_xsize(s4_orig_x)
	s4_ysize(s4_orig_y)
	time.sleep(1)
	return "<b>Optimized beam at "+str(energyEV)+".</b><br>\
New Pitch Value: "+str(DCM_Pitch())+"<br>\
New Roll Value:  "+str(DCM_Roll())+"<br>\
QBPM readings:<br>\
QBPM1: "+q1+"<br>\
QBPM2: "+q2+"<br>\
QBPM3: "+q3+"<br>\
QBPM4: "+q4+"<br><br>\
Screenshots of beam taken at (1) Full transmission, (2) 20% transmission, 100x100 slits, (3) 20% transmission, 400x400 slits", files


def MeasureFlux():
	
	
	files=[]
	try:
		print "Starting Flux Measurement..."
		energy = JythonNameSpaceMapping().BeamLineEnergy_eV()
		if (energy > 7100 and energy < 7300) or (energy > 12600 and energy < 12701) or (energy > 13400 and energy < 13600):
			if energy > 7100 and energy < 7300:
				energyA = 7200
				multiplier = 3.17E11
			if energy > 12600 and energy < 12800:
				energyA = 12657
				multiplier = 3.007E11
			if energy > 13400 and energy < 13600:
				energyA = 13500
				multiplier = 2.49E11
		else:
			return "Unable to measure flux, not at 7200eV," + " 12657eV or 13500eV", ""

		s4_orig_x = s4_xsize()
		s4_orig_y = s4_ysize()
		s4_xsize(100)
		s4_ysize(100)
		sample_shutter('CLOSE')

		print
		print "############################"
		print "Flux Calibration for " + str(energyA) + "eV"
		print "############################"

		
		JythonNameSpaceMapping().backlight('Out')

		
		print "Moving beamstop out of the way..."
		bsy(bsy()-1)

		
		if dety() < 250:
			return "Couldn't measure flux, dety was less than 250mm", ""

		
		ca.caput(beamline + "-DI-FEM-01:ACDC","DC")
		ca.caput(beamline + "-DI-FEM-01:GAIN","10^4 low noise")

		
		longfilename = directory + "Flux_measurements_" + time.strftime( "%Y%m%d_%H%M" )
		OpenDatFile(longfilename + ".dat")
		f = open(longfilename + ".dat",'a')
		f.write("\nTransmission_(%)\tFlux_(ph/s)\n")

		n=0.0
		bgfemto = i_pin()

		
		sample_shutter('OPEN')
		time.sleep(1)

		print "Beginning flux measurements..."
		##########################
		
		##########################
		while n < 1.15:
			
			Attenuator.setAttenuatorUsingCurrentEnergy(round(n,2))
			time.sleep(2)
			#trans=float(ca.caget(beamline + "-OP-ATTN-01:MATCH"))
			trans=Attenuator.getRealTransmission()

			
			femto = i_pin()

			
			flux = (femto - bgfemto) * multiplier
			if flux < 0:
				flux = 0

			
			print "Transmission:", 100*trans, "%"
			print "Flux is", flux

			
			print >>f, '%3f %s %9.3E' % (100*trans,"\t",flux)

			
			n += 0.1

		###########################
		
		###########################

		
		sample_shutter('CLOSE')
		f.close()
		print "Measurements complete..."
	
		
		bsy(bsy()+1)
		s4_xsize(s4_orig_x)
		s4_ysize(s4_orig_y)

		
		png = SavePNG(longfilename + ".png",longfilename + ".dat","Flux Measurement")
		files.extend([png])

		
		return "<b>Flux Calibration</b> for 100x100 beam at " + str(energy) + "eV Complete.<br>Maximum flux: " + str("%.4g" % flux) + " ph/s.<br>Values written to " + longfilename + ".dat", files

	except Exception, e:
		sample_shutter('CLOSE')
		return "Flux <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> measured successfully: "+str(e), files

def ScanVerticalBeamProfile():
	
	
	files=[]
	try:
		JythonNameSpaceMapping().backlight('Out')
		bsy.stop()
		bsy(bsy()-1)
		s4_orig_x = s4_xsize()
		s4_orig_y = s4_ysize()
		col_orig_y = col_y()
		s4_xsize(200)
		s4_ysize(20)
		col_y.stop()
		sample_shutter('OPEN')
		a = goToPeak.goToPeak2(None,col_y,i_pin,col_y(),0.5,0.02)
		sample_shutter('CLOSE')
		png = SavePNG(a.filePath[:-3]+"png",a.filePath[:-3]+"dat", "Vertical Beam Profile")
		files.extend([png])
		if a.maxVal > MinIPin:
			return "<b>Vertical Beam Profile</b><br>Scanned Collimation table y-axis from " + str(round(col_orig_y-0.5,4)) + " to " + str(round(col_orig_y+0.5,4)) + ", peak found at " + str(a.maxPos) + ".", files
		else:
			return "<b>Vertical Beam Profile</b><br>Scanned Collimation table y-axis from " + str(round(col_orig_y-0.5,4)) + " to " + str(round(col_orig_y+0.5,4)) + ".<br>\
<SPAN style='BACKGROUND-COLOR: #ff0000'><b>WARNING:</b></SPAN> max value of i_pin was only "+str(a.maxVal)+", which is less than the expected value of "+str(MinIPin), files

	except Exception, e:
		return "Vertical Beam Profile <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> measured successfully: "+str(e), files

	finally:
		s4_xsize(s4_orig_x)
		s4_ysize(s4_orig_y)
		bsy(bsy()+1)

def ScanHorizontalBeamProfile():
	
	files=[]
	try:
		JythonNameSpaceMapping().backlight('Out')
		bsy.stop()
		bsy(bsy()-1)
		s4_orig_x = s4_xsize()
		s4_orig_y = s4_ysize()
		col_orig_x2 = col_x2()
		s4_xsize(20)
		s4_ysize(200)
		col_x2.stop()
		sample_shutter('OPEN')
		a = goToPeak.goToPeak2(None,col_x2,i_pin,col_x2(),0.5,0.02)
		sample_shutter('CLOSE')
		png = SavePNG(a.filePath[:-3]+"png",a.filePath[:-3]+"dat", "Horizontal Beam Profile")
		files.extend([png])
		if a.maxVal > MinIPin:
			return "<b>Horizontal Beam Profile</b><br>Scanned Collimation table x-rear from " + str(round(col_orig_x2-0.5,4)) + " to " + str(round(col_orig_x2+0.5,4)) + ", peak found at " + str(a.maxPos) + ".", files
		else:
			return "<b>Horizontal Beam Profile</b><br>Scanned Collimation table x-rear from " + str(round(col_orig_x2-0.5,4)) + " to " + str(round(col_orig_x2+0.5,4)) + ".<br>\
<SPAN style='BACKGROUND-COLOR: #ff0000'><b>WARNING:</b></SPAN> max value of i_pin was only "+str(a.maxVal)+", which is less than the expected value of "+str(MinIPin), files

	except Exception, e:
		return "Horizontal Beam Profile <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> measured successfully: "+str(e), files

	finally:
		s4_xsize(s4_orig_x)
		s4_ysize(s4_orig_y)
		bsy(bsy()+1)

def LoadYAG():
	
	
	print "Loading special pin "+YAGPin
	try:
		sam_ref=Sample_reference()
		sam_ref.setContainer_reference("6")
		sam_ref.setSample_location(YAGPin)
		changeSample(sam_ref,pauseForCentring = False)
		return "YAG pin loaded successfully."
	except :
		exceptionType, exception, traceback = sys.exc_info()
		handle_messages.log( None, "YAG pin <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> loaded successfully: ", exceptionType, exception , traceback, False)
		return "YAG pin <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> loaded successfully: " + str(exception)

def LoadRotationAxisPin():
	print "Loading special pin "+RotationAxisPin
	oldgony=gony()
	files=[]
	try:
		sam_ref=Sample_reference()
		sam_ref.setContainer_reference("6")
		sam_ref.setSample_location(RotationAxisPin)
		changeSample(sam_ref,pauseForCentring = False)
		png1, png2 = takeTwoScreenGrabs("RotationAxis")
		files=[]
		files.extend([png1, png2])
		unloadSample()
		gonyoffset = str(round(ca.caget(beamline + "-MO-TABLE-02:Y.OFF"),4))
		return "Rotation axis set successfully.<br>gony was " + str(round(oldgony,3)) + "," + " now " + str(round(gony(),3)) + " (gony offset " + gonyoffset + ")", files
	except Exception, e:
		return "Rotation axis <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> set successfully: "+str(e), files

def LoadPtPin():
	
	
	print "Loading special pin "+PtPin
	try:
		sam_ref=Sample_reference()
		sam_ref.setContainer_reference("6")
		sam_ref.setSample_location(PtPin)
		changeSample(sam_ref,pauseForCentring = False)
		return "Platinum foil loaded successfully."
	except Exception, e:
		return "Platinum foil <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> loaded successfully: "+str(e)

def LoadPowderPin():
	
	
	print "Loading special pin "+PowderPin
	try:
		sam_ref=Sample_reference()
		sam_ref.setContainer_reference("6")
		sam_ref.setSample_location(PowderPin)
		changeSample(sam_ref,pauseForCentring = False)
		return "Powder Pin loaded successfully."
	except Exception, e:
		return "Powder Pin <SPAN style='BACKGROUND-COLOR: #ff0000'><b>NOT</b></SPAN> loaded successfully: "+str(e)

def SavePNG(dest,source,title="Title",width=1024,height=768):
	gda.px.util.SavePNGPlot.save(dest,source,width,height,title)
	return dest

def MoveFemtoIn():
	
	global orig_detx; orig_detx = detx()
	global orig_detyaw; orig_detyaw = detyaw()
	global orig_dety; orig_dety = dety()

	print "Moving femto diode into position..."
	if detz() > 400:
		detz(320)
	elif detz() < 200:
		detz(200)
	detyaw(FemtoInDetYaw)
	detx(FemtoInDetX)
	dety(FemtoInDetY)
	detz(FemtoInDetZ)
	return

def MoveFemtoOut():
	print "Moving detector back..."
	if detz() < 320:
		detz(320)
	elif detz() > 600:
		detz(600)
	if isMoveFemtoIn() or isMeasureFlux() or isScanVerticalBeamProfile() or isScanHorizontalBeamProfile():
		try:
			dety(orig_dety)
			detx(orig_detx)
			detyaw(orig_detyaw)
		except:
			print "Moving detector to data collection positions from beamlineParameters..."
			dety(DataCollectionDetY)
			detx(DataCollectionDetX)
			detyaw(DataCollectionDetYaw)
	else:
		print "Moving detector to data collection positions from beamlineParameters..."
		dety(DataCollectionDetY)
		detx(DataCollectionDetX)
		detyaw(DataCollectionDetYaw)
	return

def OpenDatFile(filename,scanNumber="0000"):
	f = open(filename,'w')
	f.write(" &SRS")
	f.write("\n SRSRUN=" + scanNumber + ",SRSDAT=" + time.strftime("%Y%m%d") + ",SRSTIM=" + time.strftime("%H%M%S") + ",")
	f.write("\n SRSSTN='ws00',SRSPRJ='" + Beamline + "     ',SRSEXP='commissi',")
	f.write("\n SRSTLE='                                                            ',")
	f.write("\n SRSCN1='        ',SRSCN2='        ',SRSCN3='        ',")
	f.write("\n &END")
	f.close()
	return

def getScanNumber():
	return int(gda.data.NumTracker("tmp").getCurrentFileNumber())
#	for f in os.listdir("/dls_sw/" + Beamline + "/software/gda/config/var"):
#		if ".tmp" in f:
#			return int(os.path.splitext(f)[0])

def takeScreenGrab(filename, openSampleShutter=0):
	print "Press centring complete when ready to take screen grab."
	ScriptBase.paused = 1
	try:
		scriptAction.moveTo(SampleChangerStateMonitor.MANUAL_CENTRING)
		scriptController.update(None,ManualCentreRequest())
		ScriptBase.checkForPauses()
	finally:
		scriptAction.moveTo("")
	if openSampleShutter:
		sample_shutter('OPEN')
	BCMFinder.getOpticalCamera().captureImage(filename)
	BeamDataComponent.getInstance().refreshBeamData()
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	CreateSampleImages.overlayImage(filename, beamdata)
	
def takeThreeScreenGrabs():
	print "Press centring complete when ready to take screen grab."
	ScriptBase.paused = 1
	try:
		scriptAction.moveTo(SampleChangerStateMonitor.MANUAL_CENTRING)
		scriptController.update(None,ManualCentreRequest())
		ScriptBase.checkForPauses()
	finally:
		scriptAction.moveTo("")
	sample_shutter('OPEN')
	
	currentTime = time.strftime("%Y%m%d_%H%M")
	
	Attenuator.setAttenuatorUsingCurrentEnergy(1)
	time.sleep(1)
	ScreenGrabFile1=directory + "ScreenGrab_FullTrans_" + currentTime + ".png"
	ScreenGrabFile2=directory + "ScreenGrab_20Trans_100slits_" + currentTime + ".png"
	ScreenGrabFile3=directory + "ScreenGrab_20Trans_400slits_" + currentTime + ".png"
	BCMFinder.getOpticalCamera().captureImage(ScreenGrabFile1)
	BeamDataComponent.getInstance().refreshBeamData()
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	zoomLevel = str(beamdata.zoomLevel)
	CreateSampleImages.overlayImage(ScreenGrabFile1, beamdata)
	
	Attenuator.setAttenuatorUsingCurrentEnergy(0.2)
	s4_xsize(100)
	s4_ysize(100)
	time.sleep(1)
	BCMFinder.getOpticalCamera().captureImage(ScreenGrabFile2)
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	CreateSampleImages.overlayImage(ScreenGrabFile2, beamdata)
	
	Attenuator.setAttenuatorUsingCurrentEnergy(0.2)
	s4_xsize(400)
	s4_ysize(400)
	time.sleep(1)
	BCMFinder.getOpticalCamera().captureImage(ScreenGrabFile3)
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	CreateSampleImages.overlayImage(ScreenGrabFile3, beamdata)
	sample_shutter('CLOSE')
	time.sleep(1)
	return ScreenGrabFile1,ScreenGrabFile2,ScreenGrabFile3

def takeTwoScreenGrabs(filenameprefix):
	print "Press centring complete when ready to take 2 screen grabs."
	ScriptBase.paused = 1
	try:
		scriptAction.moveTo(SampleChangerStateMonitor.MANUAL_CENTRING)
		scriptController.update(None,ManualCentreRequest())
		ScriptBase.checkForPauses()
	finally:
		scriptAction.moveTo("")
	BCMFinder.getOpticalCamera().captureImage(directory + filenameprefix + "_0.png")
	BeamDataComponent.getInstance().refreshBeamData()
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	CreateSampleImages.overlayImage(directory + filenameprefix + "_0.png", beamdata)
	if gonp() < 200:
		gonp(gonp()+180)
	else:
		gonp(gonp()-180)
	BCMFinder.getOpticalCamera().captureImage(directory + filenameprefix + "_180.png")
	beamdata = BeamDataComponent.getInstance().getCurrentBeamData()
	CreateSampleImages.overlayImage(directory + filenameprefix + "_180.png", beamdata)
	return directory + filenameprefix + "_0.png", directory + filenameprefix + "_180.png"


def toggleCryojet():
	currentpos=float(ca.caget(beamline + "-CG-JET-01:Y.RBV"))
	inpos=float(ca.caget(beamline + "-MO-CRYOS-01:IN_POS"))
	outpos=float(ca.caget(beamline + "-MO-CRYOS-01:OUT_POS"))
	demandpos=ca.caget(beamline + "-MO-CRYOS-01:READ_CRYO_SIGNAL3")
	if round(currentpos,2) == round(inpos,2):
		print "Cryojet currently in, moving out"
		if demandpos == "1":
			ca.caput(beamline + "-MO-CRYOS-01:HANDSHAKE_CTRL1", "ON")
		else:
			ca.caput(beamline + "-MO-CRYOS-01:GOTO_OUT.PROC", "1")
	else:
		print "Cryojet currently out, moving in"
		if demandpos == "0":
			ca.caput(beamline + "-MO-CRYOS-01:HANDSHAKE_CTRL1", "ON")
		else:
			ca.caput(beamline + "-MO-CRYOS-01:GOTO_IN.PROC", "1")
	return
	
def quickRobotTest():
	try:
		
		for puck in [1,2,3,4,5]:
		
			for sample in [1,3,8,12,15]:
				print "*************** test script loading",str(puck),str(sample),"at " + time.strftime("%H:%M:%S")
				
				sam_ref=Sample_reference()
				sam_ref.setContainer_reference(str(puck))
				sam_ref.setSample_location(str(sample))
		# call the changeSample method, the 0 means don't pause for centring
				changeSample(sam_ref,pauseForCentring = False)
				print "&&&&&&&&&&&&&&& loaded:",str(puck),str(sample),"at " + time.strftime("%H:%M:%S")
		
				pause()
		
		unloadSample()
		return "Quick Robot Test completed successfully."
	except Exception, e:
		return "Quick Robot Test <SPAN style='BACKGROUND-COLOR: #ff0000'><b>failed</b></SPAN> on pin "+str(puck)+" "+str(sample)+" : "+str(e)

def qbpmAverage(qbpm):
	f=open("/home/" + Beamline + "user/scripts/qbpms.txt","r")
	total=0.0
	array=[]
	for line in f:
		if qbpm in line:
			array.extend([line[7:12]])
	for i in array:
		total += float(i)
	average = total / len(array)
	f.close()
	return str(round(average,4))

def calibrateDCM():
	try:
		files=[]
		JythonNameSpaceMapping().beamline_optimiser_auto('off')
		bl = beamLineEnergy.beamLineEnergy()
		if Beamline == "i02" or Beamline == "i03":
			bl(5989)
			foil = "Cr"
			correctBragg = 19.27967
			print "Doing a quick pitch scan on qbpm1..."
			a = goToPeak.goToPeak2(None,DCM_Pitch,qbpm1,DCM_Pitch(),0.025, 0.002)
			scan(=,gda.scan.ConcurrentScan([DCM_Bragg,19.2,19.36,0.001,qbpm1,]))
			ca.caput(beamline + "-DI-QBPM-01:Y:MP:SELECT", "2") 
		elif Beamline == "i04":
			bl(11564)
			correctBragg = 9.84689
			foil = "Pt"
			print "Doing a quick pitch scan on qbpm1..."
			a = goToPeak.goToPeak2(None,DCM_Pitch,qbpm1,DCM_Pitch(),0.025, 0.002)
			scan(=,gda.scan.ConcurrentScan([DCM_Bragg,10,9.65,0.0005,qbpm1,]))
			ca.caput(beamline + "-DI-QBPM-01:Y:MP:SELECT", "3") 
		else:
			return "An error occurred running the calibrateDCM script, Beamline is unknown!", files
		JythonNameSpaceMapping().beamline_optimiser_auto('on')
		scan.runScan()
		ca.caput(beamline + "-DI-QBPM-01:Y:MP:SELECT", "2") 
		scanNumber = str(getScanNumber())
		if scanNumber == "0":
			for f in os.listdir("/dls_sw/" + Beamline + "/software/gda/config/var"):
				if ".tmp" in f:
					scanNumber=os.path.splitext(f)[0]
		print "Using scan " + directory + scanNumber + ".dat"
		png = SavePNG(directory + scanNumber + ".png",directory + scanNumber + ".dat", "DCM Calibration Bragg Scan")
		sfh = ScanFileHolder()
		sfh.loadSRS(directory + scanNumber + ".dat")
		Plotter.plot("Data Vector", sfh[0],sfh[1].diff(sfh[0]))
		diffpng = createDiffFilePNG()
		files.extend([png,diffpng])
		actualBragg = sfh[0].get(sfh[1].diff(sfh[0]).minPos())
		currentOffset = float(ca.caget(beamline + "-OP-DCM-01:BRAGG.OFF"))
		newOffset = round(currentOffset + correctBragg - actualBragg,5)
		print "The "+foil+" inflection point is at Bragg = " + str(actualBragg) + " degrees"
		print "The actual value should be " + str(correctBragg) + " degrees"
		print "The current offset is " + str(currentOffset) + " degrees"
		print "The offset should be " + str(newOffset) + " degrees"
		print "Open Data Vector tab to see the differential plot."
		return "<b>DCM Calibration</b><br>\
The Pt inflection point is at Bragg = " + str(actualBragg) + " degrees.<br>\
The actual value should be " + str(correctBragg) + " degrees.<br>\
The current offset is " + str(currentOffset) + " degrees.<br>\
The offset should be <b>" + str(newOffset) + " degrees</b>.<br>\
(The offset is not changed by this script)", files
	except:
		ca.caput(beamline + "-DI-QBPM-01:Y:MP:SELECT", "2")
		print "An error occurred running the calibrateDCM script"
		return "An error occurred running the calibrateDCM script", files

def elogScan(scanNumber=0):
	if scanNumber == 0:
		scanNumber=getScanNumber()
	scanNumber=str(scanNumber)
	print "This will save scan " + directory + scanNumber + ".dat to elog."
	title = requestInput("Please type a title for the scan.")
	png = SavePNG(directory + scanNumber + ".png", directory + scanNumber + ".dat", str(title))
	logText = requestInput("Please type any text for the elog entry:")
	logText = "<p>This scan was auto-saved to elog. To save a scan, type 'elogScan(number)' in the Jython Terminal.</p><p>" + logText + "</p>"
	title = "Auto saved scan: " + scanNumber
	userID = "gda"
	visit = None
	logID = BEAMLINE
	groupID = BEAMLINE
	files=[]
	files.extend([png])
	ElogEntry.postAsyn(title,logText,userID,visit,logID,groupID,files)

def createDiffFilePNG(scanNumber=0,x="DCM_Bragg",y="qbpm1diff"):
	if scanNumber == 0:
		scanNumber=getScanNumber()
	OpenDatFile(directory + str(scanNumber) + "diff.dat", str(scanNumber))
	f = open(directory + str(scanNumber) + "diff.dat",'a')
	sfh = ScanFileHolder()
	print "Using scan " + directory + str(scanNumber) + ".dat"
#	log("Using scan %s %d .dat" % (directory,scanNumber))
	sfh.loadSRS(scanNumber)
	f.write("\n" + x +"\t" + y)
	for i in range(0,sfh[0].dimensions[0]):
		f.write("\n" + str(sfh[0][i]) + "\t" + str(sfh[1].diff(sfh[0])[i]))
	f.close()
	SavePNG(directory + str(scanNumber) + "diff.png",directory + str(scanNumber) + "diff.dat","Differential graph - " + y + " against " + x)
	return directory + str(scanNumber) + "diff.png"
	
##### Undulator Monitoring #####

def undulatorMonitoring():
	ScriptBase.setInterrupted(False)
	ScriptBase.setPaused(False)
	directory = VisitPath.getVisitPath()+"/"
	files=[]
	BraggStart=23  
	BraggEnd=5     
	BraggStep=0.05 
	GapStart=5     
	GapEnd=11      
	GapStep=0.05   
	startTime = time.strftime("%Y%m%d_%H%M")
	text = "Undulator Monitoring script run on " + startTime+ "\n\n"
	logText = "<p><b>Undulator Monitoring script run on " + startTime+ "</b></p>"
	try:
		text = text + "Front End Aperture 4 Positions: X = " + str(ca.caget(frontend + "-AL-APTR-04:XBL.RBV")) + "," + " Y = " + str(ca.caget(frontend + "-AL-APTR-04:YBL.RBV")) + "\n\n"
		logText = logText + "<p>Front End Aperture 4 Positions: X = " + str(ca.caget(frontend + "-AL-APTR-04:XBL.RBV")) + "," + " Y = " + str(ca.caget(frontend + "-AL-APTR-04:YBL.RBV")) + "</p>"
	except:
		return "Unable to read " + frontend + "-AL-APTR-04:XBL.RBV or " + frontend + "-AL-APTR-04:YBL.RBV"

	
	JythonNameSpaceMapping().beamline_optimiser_auto('off')
	bl = beamLineEnergy.beamLineEnergy()
	bl(12700)

	
	

	scans1 = requestInput("Scan the S1 slits? (y/n)")
	if scans1 == "y":
		s1_xsize_old = s1_xsize()
		s1_ysize_old = s1_ysize()
		s1_xcentre_old = s1_xcentre()
		s1_ycentre_old = s1_ycentre()
		s1_xsize(0.1)
		a = goToPeak.goToPeak2(None,s1_xcentre,qbpm1,s1_xcentre(), 1, 0.02)
		png = SavePNG(a.filePath[:-3]+"png",a.filePath[:-3]+"dat", "Horizontal White Beam Profile")
		files.extend([png])
		s1_xsize(s1_xsize_old)
		s1_ysize(0.1)
		b = goToPeak.goToPeak2(None,s1_ycentre,qbpm1,s1_ycentre(), 1, 0.02)
		png = SavePNG(b.filePath[:-3]+"png",b.filePath[:-3]+"dat", "Vertical White Beam Profile")
		files.extend([png])
		s1_ysize(s1_ysize_old)
		text = text + "White Beam Slits horizontal scan: " + a.filePath + "\n"
		text = text + "White Beam Slits vertical scan: " + b.filePath + "\n"
		text = text + "Old WBS positions: X = " + str(s1_xcentre_old) + "," + " Y = " + str(s1_ycentre_old) + "\n"
		text = text + "New WBS positions: X = " + str(s1_xcentre()) + "," + " Y = " + str(s1_ycentre()) + "\n"
		logText = logText + "White Beam Slits horizontal scan: " + a.filePath + "<br>"
		logText = logText + "White Beam Slits vertical scan: " + b.filePath + "<br>"
		logText = logText + "Old WBS positions: X = " + str(s1_xcentre_old) + "," + " Y = " + str(s1_ycentre_old) + "<br>"
		logText = logText + "New WBS positions: X = " + str(s1_xcentre()) + "," + " Y = " + str(s1_ycentre()) + "<br>"
	
	else:
		text = text + "White beam slits not scanned - positions: X = " + str(s1_xcentre()) + "," + " Y = " + str(s1_ycentre()) + "\n"
		logText = logText + "White beam slits not scanned - positions: X = " + str(s1_xcentre()) + "," + " Y = " + str(s1_ycentre()) + "<br>"

	
	try:
		Undulator_Gap(7.0)
		scan(=,gda.scan.ConcurrentScan([DCM_Bragg,BraggStart,BraggEnd,BraggStep,qbpm1,]))
		scan.runScan()
		scanNumber = str(getScanNumber())
		text = text + "First Bragg scan with Undulator Gap at 7mm: " + directory + scanNumber + ".dat\n"
		logText = logText + "<p>First Bragg scan with Undulator Gap at 7mm: " + directory + scanNumber + ".dat<br>"
		png = SavePNG(directory + scanNumber + ".png",directory + scanNumber + ".dat", "Bragg Scan on QBPM1 at Undulator Gap = 7mm")
		SavePNG("/home/" + Beamline + "user/UndulatorMonitoring/" + scanNumber + ".png",directory + scanNumber + ".dat", "Bragg Scan on QBPM1 at Undulator Gap = 7mm")
		files.extend([png])
	except Exception, e:
		print "error..." + str(e)
		time.sleep(10)

	
	try:
		Undulator_Gap(9.0)
		scan(=,gda.scan.ConcurrentScan([DCM_Bragg,BraggStart,BraggEnd,BraggStep,qbpm1,]))
		scan.runScan()
		scanNumber = str(getScanNumber())
		text = text + "Second Bragg scan with Undulator Gap at 9mm: " + directory + scanNumber + ".dat\n"
		logText = logText + "Second Bragg scan with Undulator Gap at 9mm: " + directory + scanNumber + ".dat<br>"
		png = SavePNG(directory + scanNumber + ".png",directory + scanNumber + ".dat", "Bragg Scan on QBPM1 at Undulator Gap = 9mm")
		SavePNG("/home/" + Beamline + "user/UndulatorMonitoring/" + scanNumber + ".png",directory + scanNumber + ".dat", "Bragg Scan on QBPM1 at Undulator Gap = 9mm")
		files.extend([png])
	except Exception, e:
		print "error..." + str(e)
		time.sleep(10)

	
	try:
		bl(12700)
		scan(=,gda.scan.ConcurrentScan([Undulator_Gap,GapStart,GapEnd,GapStep,qbpm1,]))
		scan.runScan()
		scanNumber = str(getScanNumber())
		text = text + "First Gap scan at 12.7keV: " + directory + scanNumber + ".dat\n"
		logText = logText + "First Gap scan at 12.7keV: " + directory + scanNumber + ".dat<br>"
		png = SavePNG(directory + scanNumber + ".png",directory + scanNumber + ".dat", "Undulator Gap Scan on QBPM1 at 12.7keV")
		SavePNG("/home/" + Beamline + "user/UndulatorMonitoring/" + scanNumber + ".png",directory + scanNumber + ".dat", "Undulator Gap Scan on QBPM1 at 12.7keV")
		files.extend([png])
	except Exception, e:
		print "error..." + str(e)
		time.sleep(10)

	
	try:
		bl(18000)
		scan(=,gda.scan.ConcurrentScan([Undulator_Gap,GapStart,GapEnd,GapStep,qbpm1,]))
		scan.runScan()
		scanNumber = str(getScanNumber())
		text = text + "Second Gap scan at 18.0keV: " + directory + scanNumber + ".dat\n\n"
		logText = logText + "Second Gap scan at 18.0keV: " + directory + scanNumber + ".dat</p>"
		png = SavePNG(directory + scanNumber + ".png",directory + scanNumber + ".dat", "Undulator Gap Scan on QBPM1 at 18keV")
		SavePNG("/home/" + Beamline + "user/UndulatorMonitoring/" + scanNumber + ".png",directory + scanNumber + ".dat", "Undulator Gap Scan on QBPM1 at 18keV")
		files.extend([png])
	except Exception, e:
		print "error..." + str(e)
		time.sleep(10)

	
	JythonNameSpaceMapping().beamline_optimiser_auto('on')
	try:
		bl(StandardEnergy)
	except:
		pass
	text = text + "Output written to /home/" + Beamline + "user/UndulatorMonitoring/UndulatorMonitoring_" + startTime + ".txt\n"
	logText = logText + "Output written to /home/" + Beamline + "user/UndulatorMonitoring/UndulatorMonitoring_" + startTime + ".txt<br>"

	
	try:
		f = open("/home/" + Beamline + "user/UndulatorMonitoring/UndulatorMonitoring_" + startTime + ".txt","w")
		f.write(text)
		f.close()
	except Exception, e:
		print "error..." + str(e)
	
	logText = logText + "<p>To run this script, type 'AdvancedOptions.undulatorMonitoring()' in the Jython Terminal.</p>"
	title = "Undulator Monitoring: "+Beamline
	content = logText
	userID = "gda"
	visit = None
	logID = BEAMLINE
	groupID = BEAMLINE
	ElogEntry.postAsyn(title,content,userID,visit,logID,groupID,files)

	if scans1 == "y":
		returns1 = requestInput("Put the S1 slits back ? (y/n)")
		if returns1 == "y":
			s1_xcentre(s1_xcentre_old)
			s1_ycentre(s1_ycentre_old)

	return text

def roomTemperatureExperiment():
	ca.caput(beamline + "-DI-CJET-01:DISABLE","Enabled")
	ca.caput(beamline + "-DI-CJET-01:CTRL:SET","EPICS+FPLock")
	ca.caput(beamline + "-DI-CJET-01:ACTIVITY:SET","Auto")
	ca.caput(beamline + "-DI-CJET-01:TTEMP:SET","293")
	print "Warming up the cryojet, this will take about 30 mins."
	while float(ca.caget(beamline + "-DI-CJET-01:STEMP")) < 290:
		print "Warming up cryojet temperature - current temp: " + str(ca.caget(beamline + "-DI-CJET-01:STEMP")) + "K"
		time.sleep(60)
	print "Cryojet now at room temperature."
	print "Use cryoTemperatureExperiment() to re-cool the cryojet."

def cryoTemperatureExperiment():
	ca.caput(beamline + "-DI-CJET-01:DISABLE","Enabled")
	ca.caput(beamline + "-DI-CJET-01:CTRL:SET","EPICS+FPLock")
	ca.caput(beamline + "-DI-CJET-01:ACTIVITY:SET","Auto")
	ca.caput(beamline + "-DI-CJET-01:TTEMP:SET","100")
	print "Cooling down the cryojet, this will take about 45 mins."
	while float(ca.caget(beamline + "-DI-CJET-01:STEMP")) > 103:
		print "Cooling cryojet temperature - current temp: " + str(ca.caget(beamline + "-DI-CJET-01:STEMP")) + "K"
		time.sleep(60)
	print "Cryojet now at ~100K."
	print "Use roomTemperatureExperiment() to warm the cryojet."
