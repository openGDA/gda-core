/*-
 * Copyright Â© 2012 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.gda.exafs.ui;

import gda.configuration.properties.LocalProperties;
import gda.exafs.scan.ExafsScanPointCreator;
import gda.exafs.scan.ExafsScanPointCreatorException;
import gda.exafs.scan.ExafsTimeEstimator;
import gda.exafs.scan.XanesScanPointCreator;
import gda.jython.JythonServerFacade;
import gda.util.exafs.Element;

import java.lang.reflect.Method;
import java.net.URL;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import org.dawnsci.plotting.jreality.core.AxisMode;
import org.dawnsci.plotting.jreality.impl.Plot1DAppearance;
import org.dawnsci.plotting.jreality.impl.Plot1DStyles;
import org.dawnsci.plotting.jreality.overlay.Overlay1DProvider;
import org.dawnsci.plotting.jreality.overlay.OverlayProvider;
import org.dawnsci.plotting.jreality.overlay.OverlayType;
import org.dawnsci.plotting.jreality.overlay.events.AbstractOverlayConsumer;
import org.dawnsci.plotting.jreality.overlay.events.OverlayDrawingEvent;
import org.dawnsci.plotting.jreality.overlay.primitives.PrimitiveType;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.preference.PreferenceDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.ui.dialogs.PreferencesUtil;
import org.eclipse.ui.forms.events.ExpansionAdapter;
import org.eclipse.ui.forms.events.ExpansionEvent;
import org.eclipse.ui.forms.widgets.ExpandableComposite;
import org.python.core.PyObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.ac.diamond.scisoft.analysis.axis.AxisValues;
import uk.ac.diamond.scisoft.analysis.dataset.DoubleDataset;
import uk.ac.diamond.scisoft.analysis.rcp.plotting.DataSetPlotter;
import uk.ac.diamond.scisoft.analysis.rcp.plotting.IPlotUI;
import uk.ac.diamond.scisoft.analysis.rcp.plotting.Plot1DUIAdapter;
import uk.ac.diamond.scisoft.analysis.rcp.plotting.PlottingMode;
import uk.ac.gda.beans.BeansFactory;
import uk.ac.gda.beans.exafs.XanesScanParameters;
import uk.ac.gda.beans.exafs.XasScanParameters;
import uk.ac.gda.exafs.ui.preferences.ExafsEditorPreferencePage;
import uk.ac.gda.richbeans.beans.BeanUI;
import uk.ac.gda.richbeans.components.FieldComposite.NOTIFY_TYPE;
import uk.ac.gda.richbeans.components.scalebox.ScaleBox;
import uk.ac.gda.richbeans.components.wrappers.ComboWrapper;
import uk.ac.gda.richbeans.components.wrappers.LabelWrapper;
import uk.ac.gda.richbeans.editors.DirtyContainer;
import uk.ac.gda.richbeans.editors.RichBeanEditorPart;
import uk.ac.gda.richbeans.event.ValueAdapter;
import uk.ac.gda.richbeans.event.ValueEvent;
import uk.ac.gda.richbeans.event.ValueListener;
import uk.ac.gda.util.schema.SchemaReader;

/**
 * Class does not need to be public but is made so here so that tests can access it.
 */
public abstract class ElementEdgeEditor extends RichBeanEditorPart {

	protected enum ELEMENT_EVENT_TYPE {
		INIT, ELEMENT_CHANGE, EDGE_CHANGE, ENERGY_CHANGE
	}

	private static Logger logger = LoggerFactory.getLogger(ElementEdgeEditor.class);

	protected ComboWrapper edge;
	protected ComboWrapper element;
	protected ScrolledComposite scrolledComposite;
	protected Composite container;
	protected Label estimatePointsLabel;
	protected Label estimateTimeLabel;
	protected Composite expandContainer;
	protected DataSetPlotter plotter;
	protected AxisValues xAxisValues;
	protected volatile boolean suspendGraphUpdate = false;
	// Two two fields are currently not automatically used in the Xas editor as scientists have requested that they not
	// be there as they are autogenerated.
	private LabelWrapper coreHole_Label;
	private ScaleBox edgeEnergy_Label;

	public ElementEdgeEditor(String path, URL mappingURL, DirtyContainer dirtyContainer, Object editingBean) {
		super(path, mappingURL, dirtyContainer, editingBean);
	}

	/**
	 * You can override this method and call it at the start of your implementation.
	 */
	protected void createEstimationComposite(final Composite right) {

		final Composite topRight = new Composite(right, SWT.NONE);
		topRight.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		topRight.setLayout(new GridLayout(2, false));

		final Label estimatedNumberOfLabel = new Label(topRight, SWT.NONE);
		estimatedNumberOfLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));
		estimatedNumberOfLabel.setText("Number of scan points     ");
		this.estimatePointsLabel = new Label(topRight, SWT.NONE);
		estimatePointsLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));

		final Label estimatedTimeLabel = new Label(topRight, SWT.NONE);
		estimatedTimeLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));
		estimatedTimeLabel.setText("Estimated time     ");
		estimatedTimeLabel.setToolTipText("The sum of all data points, does not include the overhead for moving the mono etc.");
		this.estimateTimeLabel = new Label(topRight, SWT.NONE);
		estimateTimeLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));

		final ExpandableComposite xasScanExpandableComposite = new ExpandableComposite(right,
				ExpandableComposite.COMPACT | ExpandableComposite.TWISTIE);
		xasScanExpandableComposite.marginWidth = 5;
		xasScanExpandableComposite.marginHeight = 5;
		xasScanExpandableComposite.setText("EXAFS Graph");
		xasScanExpandableComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

		final Composite plotArea = new Composite(xasScanExpandableComposite, SWT.NONE);
		final GridLayout grid = new GridLayout(1, false);
		grid.marginBottom = 0;
		grid.marginTop = 0;
		grid.horizontalSpacing = 0;
		grid.marginWidth = 0;
		grid.verticalSpacing = 0;
		grid.marginHeight = 0;
		plotArea.setLayout(grid);

		final ToolBar plotTools = new ToolBar(plotArea, SWT.FLAT);
		plotTools.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));

		this.plotter = new DataSetPlotter(PlottingMode.ONED, plotArea, false);
		plotter.getComposite().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

		xasScanExpandableComposite.setClient(plotArea);

		this.xAxisValues = new AxisValues();
		plotter.setAxisModes(AxisMode.CUSTOM, AxisMode.LINEAR, AxisMode.LINEAR);
		plotter.setXAxisValues(xAxisValues, 1);
		plotter.setYAxisLabel("\u0394E (eV)");
		plotter.setXAxisLabel("Energy (eV)");
		plotter.setPlotActionEnabled(true);
		plotter.setPlotRightClickActionEnabled(true);
		plotter.setTickGridLines(false,false,false);

		final ToolBarManager toolBar = new ToolBarManager(plotTools);
		final IPlotUI plotUI = new Plot1DUIAdapter(toolBar, plotter, xasScanExpandableComposite, getPartName()) {
			@Override
			public void buildToolActions(IToolBarManager manager) {
				super.buildToolActions(manager);
				manager.add(createShowLegend());
			}
		};
		toolBar.update(true);
		plotter.registerUI(plotUI);

		xasScanExpandableComposite.addExpansionListener(new ExpansionAdapter() {
			@Override
			public void expansionStateChanged(ExpansionEvent e) {
				updateLayout();
			}
		});

	}

	@Override
	public void linkUI(final boolean isPageChange) {

		super.linkUI(isPageChange);

		try {
			BeanUI.addValueListener(editingBean, this, new ValueAdapter() {
				@Override
				public void valueChangePerformed(ValueEvent e) {
					getSite().getShell().getDisplay().asyncExec(new Runnable() {
						@Override
						public void run() {
							try {
								if (!suspendGraphUpdate) {
									updatePlottedPoints();
								} else {
									System.out.println("cannot update plot!");
								}
							} catch (Exception e1) {
								logger.error("Cannot update plot of points.", e1);
							}
						}
					});
				}
			});
		} catch (Exception e1) {
			logger.error("Cannot add listener to ui " + editingBean.getClass().getName(), e1);
		}

	}

	@Override
	protected List<String> getExpressionFields() throws Exception {

		if (expressionFields == null) {
			expressionFields = BeanUI.getEditingFields(editingBean, this);
			expressionFields.add("edge");
		}
		return expressionFields;
	}

	@Override
	public Object getFieldValue(final String fieldName) throws Exception {
		if ("edge".equals(fieldName))
			return edgeEnergy_Label.getNumericValue();
		return getField(fieldName).getValue();
	}

	protected EdgeOverlay edgeOverlay;
	protected Object lastPlottedBean;

	/**
	 * Do not want to call this method too much
	 * 
	 * @throws Exception
	 */
	public void updatePlottedPoints() throws Exception {

		try {
			final Object scanBean = editingBean;
			
			BeanUI.uiToBean(this, scanBean);
			if (lastPlottedBean != null && lastPlottedBean.equals(scanBean))
				return;

			final List<PyObject[]> points = getScanPoints(editingBean);

			final double[] y = new double[points.size()];
			final List<Double> x = new ArrayList<Double>(31);

			double previousEnergy = -1;
			for (int i = 0; i < points.size(); i++) {
				final double energy = points.get(i)[0].asDouble();
				x.add(energy);
				Double delta = 0d;
				if (previousEnergy > -1)
					delta = energy - previousEnergy;
				y[i] = delta;
				previousEnergy = energy;
			}
			y[0] = y[1];

//			plotter.resetView();
			plotter.getColourTable().clearLegend();

			Plot1DAppearance app = new Plot1DAppearance(java.awt.Color.BLACK, Plot1DStyles.SOLID, 1, "Exafs");
			plotter.getColourTable().addEntryOnLegend(app);

			final String[] labels = getLineLabels();
			final java.awt.Color[] colours = getLineColours();
			for (int i = 0; i < colours.length; i++) {
				app = new Plot1DAppearance(colours[i], Plot1DStyles.SOLID, 1, labels[i]);
				plotter.getColourTable().addEntryOnLegend(app);
			}

			xAxisValues.clear();
			xAxisValues.setValues(x);

			// tell the plotter that you are updating existing lines, so the zoom level is unchanged
			plotter.setPlotUpdateOperation(true);
			
			final DoubleDataset yDataSet = new DoubleDataset(y, y.length);
			plotter.replaceCurrentPlot(yDataSet);

			if (edgeOverlay != null)
				plotter.unRegisterOverlay(edgeOverlay);
			edgeOverlay = new EdgeOverlay(getSite().getShell().getDisplay(), getLineColours());
			edgeOverlay.setXValues(getLineValues());
			edgeOverlay.setY(yDataSet);
			plotter.registerOverlay(edgeOverlay);

			plotter.setTitle("EXAFS Energy Profile");
			plotter.refresh(false);
			System.out.println("refreshupdatePlottedPoints");
			
			lastPlottedBean = BeansFactory.deepClone(scanBean);

		} catch (SWTException disposed) {
			lastPlottedBean = null;
			return;

		} catch (Exception ne) {
			if (!plotter.isDisposed()) {
				plotter.resetView();
				xAxisValues.setValues(new double[] { 3000d });
				plotter.replaceCurrentPlot(new DoubleDataset(new double[] { 1d }));
				plotter.refresh(false);
			}

			lastPlottedBean = null;
		}
	}

	/** Override to provide additional lines to the edge value. */
	protected String[] getLineLabels() {
		return new String[] { "Edge" };
	}

	/** Override to provide additional lines to the edge value. */
	protected double[] getLineValues() {
		return new double[] { getEdgeValue() };
	}

	/** Override to provide additional lines to the edge value. */
	protected java.awt.Color[] getLineColours() {
		return new java.awt.Color[] { java.awt.Color.RED };
	}

	protected void updateLayout() {
		container.layout();
		expandContainer.layout();
		scrolledComposite.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));
	}

	protected void createElementEdgeArea(Group main) {

		final Composite left = new Composite(main, SWT.NONE);
		left.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false));
		final GridLayout gridLayout_2 = new GridLayout();
		gridLayout_2.numColumns = 2;
		left.setLayout(gridLayout_2);

		final Label elementLabel = new Label(left, SWT.NONE);
		elementLabel.setText("Element");

		element = new ComboWrapper(left, SWT.DROP_DOWN);
		element.setTextLimit(2);
		final GridData gd_element = new GridData(SWT.FILL, SWT.CENTER, true, false);
		gd_element.minimumWidth = 100;
		gd_element.widthHint = 100;
		element.setLayoutData(gd_element);

		final Label edgeLabel = new Label(left, SWT.NONE);
		edgeLabel.setText("Edge");

		edge = new ComboWrapper(left, SWT.READ_ONLY);

		final Label e2Label = new Label(left, SWT.NONE);
		e2Label.setText("Edge Energy");

		edgeEnergy_Label = new ScaleBox(left, SWT.NONE);
		edgeEnergy_Label.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
		edgeEnergy_Label.setUnit("eV");
		edgeEnergy_Label.setNotifyType(NOTIFY_TYPE.VALUE_CHANGED);
		edgeEnergy_Label.on();

		if (LocalProperties.get("gda.beamline.name").equals("BL18B")) {
			String dcmCrystal = JythonServerFacade.getInstance().evaluateCommand("dcm_crystal()");

			if (dcmCrystal.equals("Si(111)")) {
				edgeEnergy_Label.setMaximum(26000.0);
				edgeEnergy_Label.setMinimum(2050.0);
			} else if (dcmCrystal.equals("Si(311)")) {
				edgeEnergy_Label.setMaximum(40000.0);
				edgeEnergy_Label.setMinimum(4000.0);
			}
		} else {
			edgeEnergy_Label.setMaximum(40000.0);
		}
		BeanUI.addBeanField(editingBean.getClass(), "EdgeEnergy", edgeEnergy_Label);

		final Label coreHoleLabel = new Label(left, SWT.NONE);
		coreHoleLabel.setText("Core Hole");

		coreHole_Label = new LabelWrapper(left, SWT.NONE);
		coreHole_Label.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
		coreHole_Label.setUnit("eV");
		coreHole_Label.setActive(false);
		final GridData gd_edge = new GridData(SWT.FILL, SWT.CENTER, true, false);
		edge.setLayoutData(gd_edge);
	}

	/**
	 * @param objectName
	 * @return SchemaReader
	 * @throws Exception
	 */
	protected SchemaReader setupElementAndEdge(final String objectName) throws Exception {

		element.setItems(Element.getSortedEdgeSymbols("P", "U"));

		final SchemaReader reader = new SchemaReader(XasScanParameters.schemaUrl);
		List<String> choices = reader.getAllowedChoices(objectName, "edge");
		edge.setItems(choices.toArray(new String[choices.size()]));

		element.addValueListener(new ValueAdapter("elementListener") {
			@Override
			public void valueChangePerformed(ValueEvent e) {
				try {
					updateElement(ELEMENT_EVENT_TYPE.ELEMENT_CHANGE);
				} catch (Exception e1) {
					logger.error("Cannot update element.", e1);
				}
			}
		});
		edge.addValueListener(new ValueAdapter("edgeListener") {
			@Override
			public void valueChangePerformed(ValueEvent e) {
				try {
					updateElement(ELEMENT_EVENT_TYPE.EDGE_CHANGE);
				} catch (Exception e1) {
					logger.error("Cannot update element.", e1);
				}
			}
		});
		edgeEnergy_Label.addValueListener(new ValueAdapter("energyListener") {
			@Override
			public void valueChangePerformed(ValueEvent e) {
				try {
					updateElement(ELEMENT_EVENT_TYPE.ENERGY_CHANGE);
				} catch (Exception e1) {
					logger.error("Cannot update element.", e1);
				}
			}
		});

		return reader;
	}

	private ValueListener updateValueListener;
	private boolean updateValueAllowed = true;

	protected void setupEstimationWidgets() {

		// Make any value change update the number of points.
		if (updateValueListener == null) {
			try {
				updateValueListener = new ValueAdapter("updateValueListener") {
					@Override
					public void valueChangePerformed(ValueEvent e) {
						if (!updateValueAllowed)
							return;
						updatePointsLabels();
					}
				};
				BeanUI.addValueListener(editingBean, this, updateValueListener);
			} catch (Exception e1) {
				logger.error("Cannot add listener to update number of scan points.", e1);
			}
		}

	}

	protected void setPointsUpdate(boolean isUpdate) {
		updateValueAllowed = isUpdate;
		if (isUpdate) {

			updatePointsLabels();
		}
	}

	/**
	 * Can override to provide a different points list.
	 * 
	 * @return points
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	protected List<PyObject[]> getScanPoints(final Object currentBean) throws Exception {
		List<PyObject[]> points = null;
		if (editingBean instanceof XanesScanParameters) {
			points = XanesScanPointCreator.calculateEnergies((XanesScanParameters) currentBean);
		} else if (editingBean instanceof XasScanParameters) {
			points = ExafsScanPointCreator.calculateEnergies((XasScanParameters) currentBean);
		}
		return points;
	}

	protected void updatePointsLabels() {

		try {
			final List<PyObject[]> points = getScanPoints(getEditingBean());

			if (points == null || points.isEmpty())
				throw new Exception("Cannot esitmate points!");
			estimatePointsLabel.setText(points.size() + " points");
			estimatePointsLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));

			final long time = ExafsTimeEstimator.getTime(points);
			final Date date = new Date(time);
			final DateFormat format = DateFormat.getTimeInstance(DateFormat.MEDIUM, Locale.UK);
			format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone("GMT")));
			estimateTimeLabel.setText(format.format(date));
			estimateTimeLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));

		} catch(ExafsScanPointCreatorException e){
			estimatePointsLabel.setText(e.getMessage());
			estimatePointsLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_RED));
			estimateTimeLabel.setText(e.getMessage());
			estimateTimeLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_RED));
		}catch (Exception ne) {
			estimatePointsLabel.setText("-");
			estimateTimeLabel.setText("-");
		}
		expandContainer.layout();
	}

	/**
	 * Overide calling this method.
	 * 
	 * @throws Exception
	 */
	protected void updateElement(ELEMENT_EVENT_TYPE type) throws Exception {
		try {
			final Element element = getSelectedElement(type);
			if (element == null)
				return;
			
			final String edgeValue = getEdgeUseBean();

			if (type == ELEMENT_EVENT_TYPE.INIT || type == ELEMENT_EVENT_TYPE.ELEMENT_CHANGE) {
				final List<String> edges = element.getAllowedEdges();
				this.edge.setItems(edges.toArray(new String[edges.size()]));
				if (edgeValue != null && !edge.isDisposed()) {
					this.edge.setValue(edgeValue);
				} else {
					try {
						Method method = this.editingBean.getClass().getMethod("getEdge");
						if (!edge.isDisposed())
							this.edge.setValue(method.invoke(editingBean));
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				if (edge.getSelectionIndex() < 0)
					edge.select(0);
			}
			if (type == ELEMENT_EVENT_TYPE.ENERGY_CHANGE) {
				// do nothing for now
				return;
			}

			if (edgeValue == null)
				return;

			final double coreHole = element.getCoreHole(edgeValue);
			getCoreHole_unused().setValue(coreHole);

			final double edgeEn = element.getEdgeEnergy(edgeValue);
			getEdgeEnergy().setValue(edgeEn); // Its in eV in Element.

		} finally {
		}
	}

	private Color red, black;

	protected Element getSelectedElement(ELEMENT_EVENT_TYPE type) throws Exception {

		Element ele = getElementUseBean();
		if (ele == null && type != ELEMENT_EVENT_TYPE.INIT) {
			if (red == null || red.isDisposed())
				red = getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_RED);
			element.setForeground(red);
			return null;
		}
		if (black == null || black.isDisposed())
			black = getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_BLACK);
		element.setForeground(black);
		return ele;
	}

	@Override
	public void dispose() {
		super.dispose();
	}

	protected Element getElementUseBean() throws Exception {
		String symbol = (String) element.getValue();
		if (symbol == null || "".equals(symbol))
			symbol = (String) BeansFactory.getBeanValue(editingBean, "element");
		return Element.getElement(symbol);
	}

	protected String getEdgeUseBean() throws Exception {
		String edgeName = (String) edge.getValue();
		if (edgeName == null || "".equals(edgeName))
			edgeName = (String) BeansFactory.getBeanValue(editingBean, "edge");
		return edgeName;
	}

	/**
	 * Returns the edge value in eV. Uses the bean if value is not in the ui.
	 * 
	 * @return edge
	 */
	protected double getEdgeValue() {
		try {
			final double edgeVal = edgeEnergy_Label.getNumericValue();
			if (edgeVal > 0 && !Double.isNaN(edgeVal) && !Double.isInfinite(edgeVal))
				return edgeVal;
			final Element ele = getElementUseBean();
			final String edge = getEdgeUseBean();
			return ele.getEdgeEnergy(edge);
		} catch (Exception e) {
			logger.error("Cannot parse: " + edgeEnergy_Label.getValue(), e);
			return 0d;
		}
	}

	/**
	 * @return ScaleBox
	 */
	public LabelWrapper getCoreHole_unused() {
		return coreHole_Label;
	}

	/**
	 * @return ScaleBox
	 */
	public ScaleBox getEdgeEnergy_unused() {
		return edgeEnergy_Label;
	}

	/**
	 * @return ScaleBox
	 */
	public ScaleBox getEdgeEnergy() {
		return edgeEnergy_Label;
	}

	@Override
	public void setFocus() {
		if (container != null)
			container.setFocus();
	}

	protected void openPreferences() {
		PreferenceDialog pref = PreferencesUtil.createPreferenceDialogOn(getSite().getShell(),
				ExafsEditorPreferencePage.ID, null, null);
		if (pref != null)
			pref.open();
	}

	public class EdgeOverlay extends AbstractOverlayConsumer {

		protected double[] xValues;
		private java.awt.Color[] colours;
		private DoubleDataset y;

		public EdgeOverlay(Display display, final java.awt.Color[] colours) {
			super(display);
			this.colours = colours;
		}

		@Override
		protected int[] createDrawingParts(OverlayProvider provider) {
			final int[] lines = new int[colours.length];
			for (int i = 0; i < lines.length; i++) {
				lines[i] = provider.registerPrimitive(PrimitiveType.LINE);
			}
			return lines;
		}

		public void setY(final DoubleDataset y) {
			this.y = y;
		}

		@Override
		protected void drawOverlay(OverlayDrawingEvent evt) {
			draw();
		}

		private void draw() {
			for (int i = 0; i < xValues.length; i++) {
				drawLine(xValues[i], colours[i], i);
			}
		}

		private void drawLine(double x, java.awt.Color color, int partIndex) {
			provider.begin(OverlayType.VECTOR2D);
			provider.setColour(parts[partIndex], color);
			((Overlay1DProvider) provider).drawLine(parts[partIndex], x, y.min().doubleValue(), x, y.max()
					.doubleValue());
			provider.end(OverlayType.VECTOR2D);
		}

		public void setXValues(final double[] xValues) {
			this.xValues = xValues;
		}
	}

}
