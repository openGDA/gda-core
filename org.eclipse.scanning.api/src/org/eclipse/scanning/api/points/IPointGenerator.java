/*-
 *******************************************************************************
 * Copyright (c) 2011, 2016 Diamond Light Source Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Matthew Gerring - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.scanning.api.points;

import java.util.Iterator;
import java.util.List;

import org.eclipse.scanning.api.IModelProvider;
import org.eclipse.scanning.api.IValidator;


/**
 * Generator for a give type, T (for instance LissajousModel).
 *
 * The generator is an iterator used in the scan and a controller object
 * for the user interface which provides naming information about the
 * type of scan.
 *
 * @author Matthew Gerring
 *
 * @param <T>
 */
public interface IPointGenerator<T> extends Iterable<IPosition>, IValidator<T>, IModelProvider<T> {

	/**
	 * The model for the generator.
	 * @return
	 */
	@Override
	T getModel();

	/**
	 * The size of the points iterator. This call will be as fast as possible
	 * but can be as slow as iterating all points.
	 * @return
	 */
	int size() throws GeneratorException;

	/**
	 * The shape of the points iterator.
	 * @return
	 * @throws GeneratorException
	 */
	int[] getShape() throws GeneratorException;

	/**
	 * The rank of the points iterator.
	 * @return
	 * @throws GeneratorException
	 */
	int getRank() throws GeneratorException;

	/**
	 * Iterator over the points, fast because does not evaluate
	 * all points straight away, does it on the fly.
	 *
	 *
	 * @return
	 */
	@Override
	Iterator<IPosition> iterator();

	/**
	 * Relatively slow because all the points have to exist in memory.
	 * Points are lightweight and it is normally ok to have them all in memory.
	 * However if it can be avoided for a given scan, the scan will start faster.
	 *
	 * @return
	 */
	List<IPosition> createPoints() throws GeneratorException;

	/**
	 * By default this gets the first point from the iterator.
	 * Override to define a more efficient first point, for instance
	 * if the iterator does a sleep this method can be overridden to avoid
	 * the sleep.
	 *
	 * @return
	 */
	default IPosition getFirstPoint() {
		return iterator().next();
	}

	/**
	 * Returns the names of the scalars in the positions generated by this point generator.
	 * @return the names of the scalars
	 */
	List<String> getNames();

}
