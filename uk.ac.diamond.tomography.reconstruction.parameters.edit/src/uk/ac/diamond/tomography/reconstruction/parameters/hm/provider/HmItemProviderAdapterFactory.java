/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package uk.ac.diamond.tomography.reconstruction.parameters.hm.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.diamond.tomography.reconstruction.parameters.hm.util.HmAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HmItemProviderAdapterFactory extends HmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BackprojectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackprojectionTypeItemProvider backprojectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BackprojectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackprojectionTypeAdapter() {
		if (backprojectionTypeItemProvider == null) {
			backprojectionTypeItemProvider = new BackprojectionTypeItemProvider(this);
		}

		return backprojectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BeamlineUserType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeamlineUserTypeItemProvider beamlineUserTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BeamlineUserType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeamlineUserTypeAdapter() {
		if (beamlineUserTypeItemProvider == null) {
			beamlineUserTypeItemProvider = new BeamlineUserTypeItemProvider(this);
		}

		return beamlineUserTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BitsTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitsTypeTypeItemProvider bitsTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.BitsTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitsTypeTypeAdapter() {
		if (bitsTypeTypeItemProvider == null) {
			bitsTypeTypeItemProvider = new BitsTypeTypeItemProvider(this);
		}

		return bitsTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ByteOrderType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ByteOrderTypeItemProvider byteOrderTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ByteOrderType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createByteOrderTypeAdapter() {
		if (byteOrderTypeItemProvider == null) {
			byteOrderTypeItemProvider = new ByteOrderTypeItemProvider(this);
		}

		return byteOrderTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.CirclesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CirclesTypeItemProvider circlesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.CirclesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCirclesTypeAdapter() {
		if (circlesTypeItemProvider == null) {
			circlesTypeItemProvider = new CirclesTypeItemProvider(this);
		}

		return circlesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ClockwiseRotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockwiseRotationTypeItemProvider clockwiseRotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ClockwiseRotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockwiseRotationTypeAdapter() {
		if (clockwiseRotationTypeItemProvider == null) {
			clockwiseRotationTypeItemProvider = new ClockwiseRotationTypeItemProvider(this);
		}

		return clockwiseRotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.CoordinateSystemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinateSystemTypeItemProvider coordinateSystemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.CoordinateSystemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinateSystemTypeAdapter() {
		if (coordinateSystemTypeItemProvider == null) {
			coordinateSystemTypeItemProvider = new CoordinateSystemTypeItemProvider(this);
		}

		return coordinateSystemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DarkFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DarkFieldTypeItemProvider darkFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DarkFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDarkFieldTypeAdapter() {
		if (darkFieldTypeItemProvider == null) {
			darkFieldTypeItemProvider = new DarkFieldTypeItemProvider(this);
		}

		return darkFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DefaultXmlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultXmlTypeItemProvider defaultXmlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DefaultXmlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultXmlTypeAdapter() {
		if (defaultXmlTypeItemProvider == null) {
			defaultXmlTypeItemProvider = new DefaultXmlTypeItemProvider(this);
		}

		return defaultXmlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ExtrapolationTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtrapolationTypeTypeItemProvider extrapolationTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ExtrapolationTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtrapolationTypeTypeAdapter() {
		if (extrapolationTypeTypeItemProvider == null) {
			extrapolationTypeTypeItemProvider = new ExtrapolationTypeTypeItemProvider(this);
		}

		return extrapolationTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FBPType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBPTypeItemProvider fbpTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FBPType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBPTypeAdapter() {
		if (fbpTypeItemProvider == null) {
			fbpTypeItemProvider = new FBPTypeItemProvider(this);
		}

		return fbpTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FilterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterTypeItemProvider filterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FilterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterTypeAdapter() {
		if (filterTypeItemProvider == null) {
			filterTypeItemProvider = new FilterTypeItemProvider(this);
		}

		return filterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FirstImageIndexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FirstImageIndexTypeItemProvider firstImageIndexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FirstImageIndexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFirstImageIndexTypeAdapter() {
		if (firstImageIndexTypeItemProvider == null) {
			firstImageIndexTypeItemProvider = new FirstImageIndexTypeItemProvider(this);
		}

		return firstImageIndexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FlatDarkFieldsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlatDarkFieldsTypeItemProvider flatDarkFieldsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FlatDarkFieldsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlatDarkFieldsTypeAdapter() {
		if (flatDarkFieldsTypeItemProvider == null) {
			flatDarkFieldsTypeItemProvider = new FlatDarkFieldsTypeItemProvider(this);
		}

		return flatDarkFieldsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FlatFieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlatFieldTypeItemProvider flatFieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.FlatFieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlatFieldTypeAdapter() {
		if (flatFieldTypeItemProvider == null) {
			flatFieldTypeItemProvider = new FlatFieldTypeItemProvider(this);
		}

		return flatFieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.GapType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GapTypeItemProvider gapTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.GapType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGapTypeAdapter() {
		if (gapTypeItemProvider == null) {
			gapTypeItemProvider = new GapTypeItemProvider(this);
		}

		return gapTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksAfterColumnsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HighPeaksAfterColumnsTypeItemProvider highPeaksAfterColumnsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksAfterColumnsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHighPeaksAfterColumnsTypeAdapter() {
		if (highPeaksAfterColumnsTypeItemProvider == null) {
			highPeaksAfterColumnsTypeItemProvider = new HighPeaksAfterColumnsTypeItemProvider(this);
		}

		return highPeaksAfterColumnsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksAfterRowsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HighPeaksAfterRowsTypeItemProvider highPeaksAfterRowsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksAfterRowsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHighPeaksAfterRowsTypeAdapter() {
		if (highPeaksAfterRowsTypeItemProvider == null) {
			highPeaksAfterRowsTypeItemProvider = new HighPeaksAfterRowsTypeItemProvider(this);
		}

		return highPeaksAfterRowsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksBeforeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HighPeaksBeforeTypeItemProvider highPeaksBeforeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HighPeaksBeforeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHighPeaksBeforeTypeAdapter() {
		if (highPeaksBeforeTypeItemProvider == null) {
			highPeaksBeforeTypeItemProvider = new HighPeaksBeforeTypeItemProvider(this);
		}

		return highPeaksBeforeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HMxmlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HMxmlTypeItemProvider hMxmlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.HMxmlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHMxmlTypeAdapter() {
		if (hMxmlTypeItemProvider == null) {
			hMxmlTypeItemProvider = new HMxmlTypeItemProvider(this);
		}

		return hMxmlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageFirstType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageFirstTypeItemProvider imageFirstTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageFirstType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageFirstTypeAdapter() {
		if (imageFirstTypeItemProvider == null) {
			imageFirstTypeItemProvider = new ImageFirstTypeItemProvider(this);
		}

		return imageFirstTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageLastType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageLastTypeItemProvider imageLastTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageLastType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageLastTypeAdapter() {
		if (imageLastTypeItemProvider == null) {
			imageLastTypeItemProvider = new ImageLastTypeItemProvider(this);
		}

		return imageLastTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageStepType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageStepTypeItemProvider imageStepTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ImageStepType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageStepTypeAdapter() {
		if (imageStepTypeItemProvider == null) {
			imageStepTypeItemProvider = new ImageStepTypeItemProvider(this);
		}

		return imageStepTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.InputDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputDataTypeItemProvider inputDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.InputDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputDataTypeAdapter() {
		if (inputDataTypeItemProvider == null) {
			inputDataTypeItemProvider = new InputDataTypeItemProvider(this);
		}

		return inputDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.IntensityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntensityTypeItemProvider intensityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.IntensityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntensityTypeAdapter() {
		if (intensityTypeItemProvider == null) {
			intensityTypeItemProvider = new IntensityTypeItemProvider(this);
		}

		return intensityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.InterpolationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterpolationTypeItemProvider interpolationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.InterpolationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterpolationTypeAdapter() {
		if (interpolationTypeItemProvider == null) {
			interpolationTypeItemProvider = new InterpolationTypeItemProvider(this);
		}

		return interpolationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MemorySizeMaxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemorySizeMaxTypeItemProvider memorySizeMaxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MemorySizeMaxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemorySizeMaxTypeAdapter() {
		if (memorySizeMaxTypeItemProvider == null) {
			memorySizeMaxTypeItemProvider = new MemorySizeMaxTypeItemProvider(this);
		}

		return memorySizeMaxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MemorySizeMinType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemorySizeMinTypeItemProvider memorySizeMinTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MemorySizeMinType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemorySizeMinTypeAdapter() {
		if (memorySizeMinTypeItemProvider == null) {
			memorySizeMinTypeItemProvider = new MemorySizeMinTypeItemProvider(this);
		}

		return memorySizeMinTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MissedProjectionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissedProjectionsTypeItemProvider missedProjectionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MissedProjectionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissedProjectionsTypeAdapter() {
		if (missedProjectionsTypeItemProvider == null) {
			missedProjectionsTypeItemProvider = new MissedProjectionsTypeItemProvider(this);
		}

		return missedProjectionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MissedProjectionsTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissedProjectionsTypeTypeItemProvider missedProjectionsTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.MissedProjectionsTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissedProjectionsTypeTypeAdapter() {
		if (missedProjectionsTypeTypeItemProvider == null) {
			missedProjectionsTypeTypeItemProvider = new MissedProjectionsTypeTypeItemProvider(this);
		}

		return missedProjectionsTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NameType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTypeItemProvider nameTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NameType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTypeAdapter() {
		if (nameTypeItemProvider == null) {
			nameTypeItemProvider = new NameTypeItemProvider(this);
		}

		return nameTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NODType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NODTypeItemProvider nodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NODType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNODTypeAdapter() {
		if (nodTypeItemProvider == null) {
			nodTypeItemProvider = new NODTypeItemProvider(this);
		}

		return nodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NormalisationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalisationTypeItemProvider normalisationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NormalisationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalisationTypeAdapter() {
		if (normalisationTypeItemProvider == null) {
			normalisationTypeItemProvider = new NormalisationTypeItemProvider(this);
		}

		return normalisationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NumSeriesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumSeriesTypeItemProvider numSeriesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.NumSeriesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumSeriesTypeAdapter() {
		if (numSeriesTypeItemProvider == null) {
			numSeriesTypeItemProvider = new NumSeriesTypeItemProvider(this);
		}

		return numSeriesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OffsetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OffsetTypeItemProvider offsetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OffsetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOffsetTypeAdapter() {
		if (offsetTypeItemProvider == null) {
			offsetTypeItemProvider = new OffsetTypeItemProvider(this);
		}

		return offsetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OrientationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrientationTypeItemProvider orientationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OrientationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrientationTypeAdapter() {
		if (orientationTypeItemProvider == null) {
			orientationTypeItemProvider = new OrientationTypeItemProvider(this);
		}

		return orientationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OutputDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDataTypeItemProvider outputDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OutputDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDataTypeAdapter() {
		if (outputDataTypeItemProvider == null) {
			outputDataTypeItemProvider = new OutputDataTypeItemProvider(this);
		}

		return outputDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OutputWidthTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputWidthTypeTypeItemProvider outputWidthTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.OutputWidthTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputWidthTypeTypeAdapter() {
		if (outputWidthTypeTypeItemProvider == null) {
			outputWidthTypeTypeItemProvider = new OutputWidthTypeTypeItemProvider(this);
		}

		return outputWidthTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.PolarCartesianInterpolationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolarCartesianInterpolationTypeItemProvider polarCartesianInterpolationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.PolarCartesianInterpolationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolarCartesianInterpolationTypeAdapter() {
		if (polarCartesianInterpolationTypeItemProvider == null) {
			polarCartesianInterpolationTypeItemProvider = new PolarCartesianInterpolationTypeItemProvider(this);
		}

		return polarCartesianInterpolationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.PreprocessingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreprocessingTypeItemProvider preprocessingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.PreprocessingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreprocessingTypeAdapter() {
		if (preprocessingTypeItemProvider == null) {
			preprocessingTypeItemProvider = new PreprocessingTypeItemProvider(this);
		}

		return preprocessingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ProfileTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfileTypeTypeItemProvider profileTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ProfileTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfileTypeTypeAdapter() {
		if (profileTypeTypeItemProvider == null) {
			profileTypeTypeItemProvider = new ProfileTypeTypeItemProvider(this);
		}

		return profileTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ProfileTypeType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfileTypeType1ItemProvider profileTypeType1ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ProfileTypeType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfileTypeType1Adapter() {
		if (profileTypeType1ItemProvider == null) {
			profileTypeType1ItemProvider = new ProfileTypeType1ItemProvider(this);
		}

		return profileTypeType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RawType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RawTypeItemProvider rawTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RawType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRawTypeAdapter() {
		if (rawTypeItemProvider == null) {
			rawTypeItemProvider = new RawTypeItemProvider(this);
		}

		return rawTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RestrictionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionsTypeItemProvider restrictionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RestrictionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionsTypeAdapter() {
		if (restrictionsTypeItemProvider == null) {
			restrictionsTypeItemProvider = new RestrictionsTypeItemProvider(this);
		}

		return restrictionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RestrictionsType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionsType1ItemProvider restrictionsType1ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RestrictionsType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionsType1Adapter() {
		if (restrictionsType1ItemProvider == null) {
			restrictionsType1ItemProvider = new RestrictionsType1ItemProvider(this);
		}

		return restrictionsType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RingArtefactsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RingArtefactsTypeItemProvider ringArtefactsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RingArtefactsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRingArtefactsTypeAdapter() {
		if (ringArtefactsTypeItemProvider == null) {
			ringArtefactsTypeItemProvider = new RingArtefactsTypeItemProvider(this);
		}

		return ringArtefactsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ROIType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROITypeItemProvider roiTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ROIType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROITypeAdapter() {
		if (roiTypeItemProvider == null) {
			roiTypeItemProvider = new ROITypeItemProvider(this);
		}

		return roiTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RotationAngleEndPointsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotationAngleEndPointsTypeItemProvider rotationAngleEndPointsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RotationAngleEndPointsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotationAngleEndPointsTypeAdapter() {
		if (rotationAngleEndPointsTypeItemProvider == null) {
			rotationAngleEndPointsTypeItemProvider = new RotationAngleEndPointsTypeItemProvider(this);
		}

		return rotationAngleEndPointsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RotationAngleTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotationAngleTypeTypeItemProvider rotationAngleTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.RotationAngleTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotationAngleTypeTypeAdapter() {
		if (rotationAngleTypeTypeItemProvider == null) {
			rotationAngleTypeTypeItemProvider = new RotationAngleTypeTypeItemProvider(this);
		}

		return rotationAngleTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ScaleTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScaleTypeTypeItemProvider scaleTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ScaleTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScaleTypeTypeAdapter() {
		if (scaleTypeTypeItemProvider == null) {
			scaleTypeTypeItemProvider = new ScaleTypeTypeItemProvider(this);
		}

		return scaleTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ShapeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapeTypeItemProvider shapeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ShapeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapeTypeAdapter() {
		if (shapeTypeItemProvider == null) {
			shapeTypeItemProvider = new ShapeTypeItemProvider(this);
		}

		return shapeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ShapeType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapeType1ItemProvider shapeType1ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ShapeType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapeType1Adapter() {
		if (shapeType1ItemProvider == null) {
			shapeType1ItemProvider = new ShapeType1ItemProvider(this);
		}

		return shapeType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.StateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateTypeItemProvider stateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.StateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateTypeAdapter() {
		if (stateTypeItemProvider == null) {
			stateTypeItemProvider = new StateTypeItemProvider(this);
		}

		return stateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TiltType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TiltTypeItemProvider tiltTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TiltType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTiltTypeAdapter() {
		if (tiltTypeItemProvider == null) {
			tiltTypeItemProvider = new TiltTypeItemProvider(this);
		}

		return tiltTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TransformType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformTypeItemProvider transformTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TransformType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformTypeAdapter() {
		if (transformTypeItemProvider == null) {
			transformTypeItemProvider = new TransformTypeItemProvider(this);
		}

		return transformTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeTypeItemProvider typeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeTypeAdapter() {
		if (typeTypeItemProvider == null) {
			typeTypeItemProvider = new TypeTypeItemProvider(this);
		}

		return typeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType1ItemProvider typeType1ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType1Adapter() {
		if (typeType1ItemProvider == null) {
			typeType1ItemProvider = new TypeType1ItemProvider(this);
		}

		return typeType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType2ItemProvider typeType2ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType2Adapter() {
		if (typeType2ItemProvider == null) {
			typeType2ItemProvider = new TypeType2ItemProvider(this);
		}

		return typeType2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType3ItemProvider typeType3ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType3Adapter() {
		if (typeType3ItemProvider == null) {
			typeType3ItemProvider = new TypeType3ItemProvider(this);
		}

		return typeType3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType4ItemProvider typeType4ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType4Adapter() {
		if (typeType4ItemProvider == null) {
			typeType4ItemProvider = new TypeType4ItemProvider(this);
		}

		return typeType4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType5} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType5ItemProvider typeType5ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType5}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType5Adapter() {
		if (typeType5ItemProvider == null) {
			typeType5ItemProvider = new TypeType5ItemProvider(this);
		}

		return typeType5ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType6} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType6ItemProvider typeType6ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType6}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType6Adapter() {
		if (typeType6ItemProvider == null) {
			typeType6ItemProvider = new TypeType6ItemProvider(this);
		}

		return typeType6ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType7} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType7ItemProvider typeType7ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType7}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType7Adapter() {
		if (typeType7ItemProvider == null) {
			typeType7ItemProvider = new TypeType7ItemProvider(this);
		}

		return typeType7ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType8} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType8ItemProvider typeType8ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType8}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType8Adapter() {
		if (typeType8ItemProvider == null) {
			typeType8ItemProvider = new TypeType8ItemProvider(this);
		}

		return typeType8ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType9} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType9ItemProvider typeType9ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType9}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType9Adapter() {
		if (typeType9ItemProvider == null) {
			typeType9ItemProvider = new TypeType9ItemProvider(this);
		}

		return typeType9ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType10} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType10ItemProvider typeType10ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType10}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType10Adapter() {
		if (typeType10ItemProvider == null) {
			typeType10ItemProvider = new TypeType10ItemProvider(this);
		}

		return typeType10ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType11} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType11ItemProvider typeType11ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType11}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType11Adapter() {
		if (typeType11ItemProvider == null) {
			typeType11ItemProvider = new TypeType11ItemProvider(this);
		}

		return typeType11ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType12} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType12ItemProvider typeType12ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType12}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType12Adapter() {
		if (typeType12ItemProvider == null) {
			typeType12ItemProvider = new TypeType12ItemProvider(this);
		}

		return typeType12ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType13} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType13ItemProvider typeType13ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType13}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType13Adapter() {
		if (typeType13ItemProvider == null) {
			typeType13ItemProvider = new TypeType13ItemProvider(this);
		}

		return typeType13ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType14} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType14ItemProvider typeType14ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType14}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType14Adapter() {
		if (typeType14ItemProvider == null) {
			typeType14ItemProvider = new TypeType14ItemProvider(this);
		}

		return typeType14ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType15} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType15ItemProvider typeType15ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType15}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType15Adapter() {
		if (typeType15ItemProvider == null) {
			typeType15ItemProvider = new TypeType15ItemProvider(this);
		}

		return typeType15ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType16} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType16ItemProvider typeType16ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType16}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType16Adapter() {
		if (typeType16ItemProvider == null) {
			typeType16ItemProvider = new TypeType16ItemProvider(this);
		}

		return typeType16ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType17} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeType17ItemProvider typeType17ItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.TypeType17}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeType17Adapter() {
		if (typeType17ItemProvider == null) {
			typeType17ItemProvider = new TypeType17ItemProvider(this);
		}

		return typeType17ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueMaxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueMaxTypeItemProvider valueMaxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueMaxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueMaxTypeAdapter() {
		if (valueMaxTypeItemProvider == null) {
			valueMaxTypeItemProvider = new ValueMaxTypeItemProvider(this);
		}

		return valueMaxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueMinType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueMinTypeItemProvider valueMinTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueMinType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueMinTypeAdapter() {
		if (valueMinTypeItemProvider == null) {
			valueMinTypeItemProvider = new ValueMinTypeItemProvider(this);
		}

		return valueMinTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueStepType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueStepTypeItemProvider valueStepTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.ValueStepType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueStepTypeAdapter() {
		if (valueStepTypeItemProvider == null) {
			valueStepTypeItemProvider = new ValueStepTypeItemProvider(this);
		}

		return valueStepTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.WindowNameType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowNameTypeItemProvider windowNameTypeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.diamond.tomography.reconstruction.parameters.hm.WindowNameType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowNameTypeAdapter() {
		if (windowNameTypeItemProvider == null) {
			windowNameTypeItemProvider = new WindowNameTypeItemProvider(this);
		}

		return windowNameTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (backprojectionTypeItemProvider != null) backprojectionTypeItemProvider.dispose();
		if (beamlineUserTypeItemProvider != null) beamlineUserTypeItemProvider.dispose();
		if (bitsTypeTypeItemProvider != null) bitsTypeTypeItemProvider.dispose();
		if (byteOrderTypeItemProvider != null) byteOrderTypeItemProvider.dispose();
		if (circlesTypeItemProvider != null) circlesTypeItemProvider.dispose();
		if (clockwiseRotationTypeItemProvider != null) clockwiseRotationTypeItemProvider.dispose();
		if (coordinateSystemTypeItemProvider != null) coordinateSystemTypeItemProvider.dispose();
		if (darkFieldTypeItemProvider != null) darkFieldTypeItemProvider.dispose();
		if (defaultXmlTypeItemProvider != null) defaultXmlTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (extrapolationTypeTypeItemProvider != null) extrapolationTypeTypeItemProvider.dispose();
		if (fbpTypeItemProvider != null) fbpTypeItemProvider.dispose();
		if (filterTypeItemProvider != null) filterTypeItemProvider.dispose();
		if (firstImageIndexTypeItemProvider != null) firstImageIndexTypeItemProvider.dispose();
		if (flatDarkFieldsTypeItemProvider != null) flatDarkFieldsTypeItemProvider.dispose();
		if (flatFieldTypeItemProvider != null) flatFieldTypeItemProvider.dispose();
		if (gapTypeItemProvider != null) gapTypeItemProvider.dispose();
		if (highPeaksAfterColumnsTypeItemProvider != null) highPeaksAfterColumnsTypeItemProvider.dispose();
		if (highPeaksAfterRowsTypeItemProvider != null) highPeaksAfterRowsTypeItemProvider.dispose();
		if (highPeaksBeforeTypeItemProvider != null) highPeaksBeforeTypeItemProvider.dispose();
		if (hMxmlTypeItemProvider != null) hMxmlTypeItemProvider.dispose();
		if (imageFirstTypeItemProvider != null) imageFirstTypeItemProvider.dispose();
		if (imageLastTypeItemProvider != null) imageLastTypeItemProvider.dispose();
		if (imageStepTypeItemProvider != null) imageStepTypeItemProvider.dispose();
		if (inputDataTypeItemProvider != null) inputDataTypeItemProvider.dispose();
		if (intensityTypeItemProvider != null) intensityTypeItemProvider.dispose();
		if (interpolationTypeItemProvider != null) interpolationTypeItemProvider.dispose();
		if (memorySizeMaxTypeItemProvider != null) memorySizeMaxTypeItemProvider.dispose();
		if (memorySizeMinTypeItemProvider != null) memorySizeMinTypeItemProvider.dispose();
		if (missedProjectionsTypeItemProvider != null) missedProjectionsTypeItemProvider.dispose();
		if (missedProjectionsTypeTypeItemProvider != null) missedProjectionsTypeTypeItemProvider.dispose();
		if (nameTypeItemProvider != null) nameTypeItemProvider.dispose();
		if (nodTypeItemProvider != null) nodTypeItemProvider.dispose();
		if (normalisationTypeItemProvider != null) normalisationTypeItemProvider.dispose();
		if (numSeriesTypeItemProvider != null) numSeriesTypeItemProvider.dispose();
		if (offsetTypeItemProvider != null) offsetTypeItemProvider.dispose();
		if (orientationTypeItemProvider != null) orientationTypeItemProvider.dispose();
		if (outputDataTypeItemProvider != null) outputDataTypeItemProvider.dispose();
		if (outputWidthTypeTypeItemProvider != null) outputWidthTypeTypeItemProvider.dispose();
		if (polarCartesianInterpolationTypeItemProvider != null) polarCartesianInterpolationTypeItemProvider.dispose();
		if (preprocessingTypeItemProvider != null) preprocessingTypeItemProvider.dispose();
		if (profileTypeTypeItemProvider != null) profileTypeTypeItemProvider.dispose();
		if (profileTypeType1ItemProvider != null) profileTypeType1ItemProvider.dispose();
		if (rawTypeItemProvider != null) rawTypeItemProvider.dispose();
		if (restrictionsTypeItemProvider != null) restrictionsTypeItemProvider.dispose();
		if (restrictionsType1ItemProvider != null) restrictionsType1ItemProvider.dispose();
		if (ringArtefactsTypeItemProvider != null) ringArtefactsTypeItemProvider.dispose();
		if (roiTypeItemProvider != null) roiTypeItemProvider.dispose();
		if (rotationAngleEndPointsTypeItemProvider != null) rotationAngleEndPointsTypeItemProvider.dispose();
		if (rotationAngleTypeTypeItemProvider != null) rotationAngleTypeTypeItemProvider.dispose();
		if (scaleTypeTypeItemProvider != null) scaleTypeTypeItemProvider.dispose();
		if (shapeTypeItemProvider != null) shapeTypeItemProvider.dispose();
		if (shapeType1ItemProvider != null) shapeType1ItemProvider.dispose();
		if (stateTypeItemProvider != null) stateTypeItemProvider.dispose();
		if (tiltTypeItemProvider != null) tiltTypeItemProvider.dispose();
		if (transformTypeItemProvider != null) transformTypeItemProvider.dispose();
		if (typeTypeItemProvider != null) typeTypeItemProvider.dispose();
		if (typeType1ItemProvider != null) typeType1ItemProvider.dispose();
		if (typeType2ItemProvider != null) typeType2ItemProvider.dispose();
		if (typeType3ItemProvider != null) typeType3ItemProvider.dispose();
		if (typeType4ItemProvider != null) typeType4ItemProvider.dispose();
		if (typeType5ItemProvider != null) typeType5ItemProvider.dispose();
		if (typeType6ItemProvider != null) typeType6ItemProvider.dispose();
		if (typeType7ItemProvider != null) typeType7ItemProvider.dispose();
		if (typeType8ItemProvider != null) typeType8ItemProvider.dispose();
		if (typeType9ItemProvider != null) typeType9ItemProvider.dispose();
		if (typeType10ItemProvider != null) typeType10ItemProvider.dispose();
		if (typeType11ItemProvider != null) typeType11ItemProvider.dispose();
		if (typeType12ItemProvider != null) typeType12ItemProvider.dispose();
		if (typeType13ItemProvider != null) typeType13ItemProvider.dispose();
		if (typeType14ItemProvider != null) typeType14ItemProvider.dispose();
		if (typeType15ItemProvider != null) typeType15ItemProvider.dispose();
		if (typeType16ItemProvider != null) typeType16ItemProvider.dispose();
		if (typeType17ItemProvider != null) typeType17ItemProvider.dispose();
		if (valueMaxTypeItemProvider != null) valueMaxTypeItemProvider.dispose();
		if (valueMinTypeItemProvider != null) valueMinTypeItemProvider.dispose();
		if (valueStepTypeItemProvider != null) valueStepTypeItemProvider.dispose();
		if (windowNameTypeItemProvider != null) windowNameTypeItemProvider.dispose();
	}

}
