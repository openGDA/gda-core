<?xml version="1.0" encoding="UTF-8"?>
<project name="headless-test-common" basedir=".">
	<description>
Common tasks used in headless testing. Must be imported in all ant test scripts.
	</description>

	<property name="test-common-included" value="true" />

	<property environment="env" />

	<!-- Convert the Java system properties to the equivalent Eclipse conventions -->
	<!-- see org.eclipse.osgi.service.environment.Constants for known values -->
	<condition property="eclipse.os" value="linux">
		<os family="unix" />
	</condition>
	<condition property="os.isLinux">
		<os family="unix" />
	</condition>

	<condition property="eclipse.os" value="win32">  <!-- note that win32 includes both 32- and 64-bit windows -->
		<os family="windows" />
	</condition>
	<condition property="os.isWindows">
		<os family="windows" />
	</condition>

	<condition property="eclipse.os" value="macosx">
		<os family="mac" />
	</condition>
	<fail unless="eclipse.os" message="eclipse.os could not be set, since os family not recognised" />

	<condition property="eclipse.arch" value="x86">
		<equals arg1="${os.arch}" arg2="i386" />
	</condition>
	<condition property="eclipse.arch" value="x86">
		<equals arg1="${os.arch}" arg2="x86" />
	</condition>
	<condition property="eclipse.arch" value="x86_64">
		<equals arg1="${os.arch}" arg2="amd64" />
	</condition>
	<fail unless="eclipse.arch" message="eclipse.arch could not be set, since os.arch=${os.arch} not recognised" />

	<!-- Under Windows, we will need to pass SystemRoot=C:\WINDOWS or similar to any subtasks  -->
	<condition property="SystemRootLiteral" value="SystemRoot" else="dummy.for.SystemRootLiteral">
		<isset property="env.SystemRoot" />
	</condition>
	<condition property="SystemRoot" value="${env.SystemRoot}" else="dummy.for.SystemRoot">
		<isset property="env.SystemRoot" />
	</condition>

	<!-- Location of junit .jar -->
	<path id="junitjar.loc.id">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="org.junit_*/junit.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>
	<property name="junitjar.loc" refid="junitjar.loc.id" />  <!-- turn the path into a property -->

	<!-- Location of jython .jar -->
	<target name="_set-jythonjar-loc">
		<path id="jythonjar.loc.id">
			<first count="1"><sort>
				<fileset dir="${workspace.git.loc}/diamond-jython.git/uk.ac.diamond.jython" includes="jython*/jython.jar" />
				<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
					<name/>  <!-- 'name' inherits reverse's namespace -->
				</reverse>
			</sort></first>
		</path>
		<property name="jythonjar.loc" refid="jythonjar.loc.id" />  <!-- turn the path into a property -->
	</target>

	<path id="tp.jcl-over-slf4j.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="jcl.over.slf4j_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>
	<path id="tp.log4j-over-slf4j.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="log4j.over.slf4j_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>
	<path id="tp.slf4j.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="slf4j.api_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>
	<path id="tp.slf4j.ext.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="slf4j.ext_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>

	<!-- SWT platform-specific path -->
	<condition property="eclipse.window.os" value="gtk.linux">
		<equals arg1="${eclipse.os}" arg2="linux" />
	</condition>
	<condition property="eclipse.window.os" value="win32.win32">
		<equals arg1="${eclipse.os}" arg2="win32" />
	</condition>
	<condition property="eclipse.window.os" value="cocoa.macosx">
		<equals arg1="${eclipse.os}" arg2="macosx" />
	</condition>
	<path id="tp.swt.path">
		<fileset dir="${workspace.loc}/tp/plugins">
			<include name="org.eclipse.swt_*.jar" />                                       <!-- the platform-independent jar -->
			<include name="org.eclipse.swt.${eclipse.window.os}.${eclipse.arch}_*.jar" />  <!-- the platform-dependent jar -->
		</fileset>
	</path>
	<path id="tp.swtbot.path">
		<fileset dir="${workspace.loc}/tp/plugins">
			<include name="org.eclipse.swtbot.*.jar" />                                    <!-- the SWTBot jars (platform-independent) -->
		</fileset>
	</path>

	<!-- Location of latest versions of hamcrest jars -->
	<path id="tp.hamcrest.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="org.hamcrest.core_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="org.hamcrest.library_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>

	<path id="tp.javax.measure.unit.path">
		<first count="1"><sort>
			<fileset dir="${workspace.loc}/tp/plugins" includes="javax.measure.unit-api_*.jar" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name/>  <!-- 'name' inherits reverse's namespace -->
			</reverse>
		</sort></first>
	</path>

	<!-- Target platform, with a few exclusions -->
	<path id="tp.path">
		<fileset dir="${workspace.loc}/tp/plugins">
			<include name="*.jar" />
			<exclude name="*.source_*" />
			<exclude name="org.apache.ant*" />
			<exclude name="org.eclipse.ant*" />
			<exclude name="org.junit*" />                <!-- Use junitjar.loc, not tp.path, to add JUnit to the classpath -->
			<exclude name="org.eclipse.jdt.junit*" />    <!-- Use junitjar.loc, not tp.path, to add JUnit to the classpath -->
			<exclude name="*org.jscience*" />            <!-- Use tp.jscience.path or tp.jscience4.path if required -->
			<exclude name="javax.measure.unit-api*" />   <!-- Use tp.javax.measure.unit.path if required -->
			<exclude name="org.hamcrest.*" />            <!-- Use tp.hamcrest.path if you need Hamcrest -->
			<exclude name="org.eclipse.swt.*" />         <!-- Use tp.swt.path if you need SWT -->
			<exclude name="org.eclipse.swtbot.*.jar" />  <!-- Use tp.swtbot.path if you need SWTBot -->
			<exclude name="org.apache.batik*" />         <!-- org.apache.batik.pdf has it's own copy of org.apache.commons.io so exclude it -->
		</fileset>
	</path>

	<!-- ======================================================================
		   Testing
		 ====================================================================== -->

	<!-- set path for platform- and OS-dependent libraries -->
	<target name="set-context" depends="_set-context-Linux, _set-context-Windows">
	</target>
	<target name="_set-context-Linux" if="os.isLinux">
		<property name="java.library.path.name" value="LD_LIBRARY_PATH" />
		<condition property="previous.java.library.path.value" value="${env.LD_LIBRARY_PATH}" else="">
			<isset property="env.LD_LIBRARY_PATH" />
		</condition>
		<property name="system.path.name" value="PATH" />
		<condition property="system.path.value" value="${env.PATH}" else="">
			<isset property="env.PATH" />
		</condition>
	</target>
	<target name="_set-context-Windows" if="os.isWindows">
		<property name="java.library.path.name" value="Path" />
		<condition property="previous.java.library.path.value" value="${env.Path}" else="">
			<isset property="env.Path" />
		</condition>
		<property name="system.path.name" value="dummy.for.system.path.name" />  <!-- On Windows, system and Java path are the same -->
		<property name="system.path.value" value="dummy.for.system.path.value" />
	</target>

	<target name="_set-library-PATH-VALUE-GDA">
		<path id="java.library.path.value">
			<dirset dir="${workspace.git.loc}">
				<include name="gda-common*/uk.ac.gda.common/lib/${eclipse.os}-${eclipse.arch}" />
				<include name="gda-core*/uk.ac.gda.core/lib/${eclipse.os}-${eclipse.arch}" />
				<include name="dawn-hdf*/hdf.hdf5lib/lib/${eclipse.os}-${eclipse.arch}" />
				<include name="scisoft-cbflib*/uk.ac.diamond.CBFlib/lib/${eclipse.os}-${eclipse.arch}" />
				<include name="gda-diamond*/uk.ac.gda.dls/lib/${eclipse.os}-${eclipse.arch}" />
			</dirset>
			<pathelement path="${previous.java.library.path.value}" />
		</path>
		<pathconvert property="java.library.path.value" refid="java.library.path.value" setonempty="no" />
	</target>

	<target name="_set-library-PATH-VALUE-DAWN">
		<path id="java.library.path.value">
			<dirset dir="${workspace.git.loc}">
				<include name="dawn-hdf*/hdf.hdf5lib/lib/${eclipse.os}-${eclipse.arch}" />
				<include name="scisoft-cbflib*/uk.ac.diamond.CBFlib/lib/${eclipse.os}-${eclipse.arch}" />
			</dirset>
			<pathelement path="${previous.java.library.path.value}" />
		</path>
		<pathconvert property="java.library.path.value" refid="java.library.path.value" setonempty="no" />
	</target>

	<target name="set-test-base-GDA" depends="set-context, _set-jythonjar-loc, _set-library-PATH-VALUE-GDA">
		<fail message="Unable to set property &quot;java.library.path.name&quot;, possibly because the platform was not recognised" unless="java.library.path.name" />
		<fail message="Unable to set property &quot;java.library.path.value&quot;, either because the platform was not recognised, or the native libraries were not found" unless="java.library.path.value" />
		<property name="set-library-path.done" value="true"/>
	</target>

	<target name="set-test-base-DAWN" depends="set-context, _set-jythonjar-loc, _set-library-PATH-VALUE-DAWN" unless="set-library-path.done">
		<fail message="Unable to set property &quot;java.library.path.name&quot;, possibly because the platform was not recognised" unless="java.library.path.name" />
		<fail message="Unable to set property &quot;java.library.path.value&quot;, either because the platform was not recognised, or the native libraries were not found" unless="java.library.path.value" />
		<property name="org.dawnsci.python.test" value="${env.org_dawnsci_python_test}"/>
		<property name="org.dawnsci.python.path" value="${workspace.git.loc}/scisoft-core.git/uk.ac.diamond.scisoft.python/src"/>
		<property name="org.dawnsci.python.executable" value="${env.org_dawnsci_python_executable}"/>
		<property name="set-library-path.done" value="true"/>
	</target>

	<!-- dummy X-server when running headless under Linux -->
	<target name="Xvfb_check" unless="Xvfb_check_done">
		<exec executable="which" osfamily="unix" resultproperty="which_Xvfb_result" inputstring="">
			<arg value="Xvfb" />
		</exec>
		<condition property="Xvfb_available">
			<and>
				<os family="unix" />
				<equals arg1="${which_Xvfb_result}" arg2="0" />
			</and>
		</condition>
		<property name="Xvfb_check_done" value="true" />
	</target>

	<target name="Xvfb_start" depends="Xvfb_check" if="Xvfb_available">
		<!-- If invoked from "pewma.py", Xvfb-display-number has already been set.
		     This allows tests to be run in parallel without using the same Xvfb-display-number -->
		<property name="Xvfb-display-number" value="6123" />
		<property name="Xvfb-display-name" value="DISPLAY" />
		<echo>Starting Xvfb with DISPLAY :${Xvfb-display-number} to act as dummy XServer</echo>
		<exec executable="Xvfb" spawn="true" os="Linux">
			<arg value=":${Xvfb-display-number}" />
			<arg value="-ac" />
			<arg value="-nolisten" />
			<arg value="tcp" />
		</exec>
		<sleep seconds="1" />  <!-- allow time to initialize -->
	</target>

	<target name="Xvfb_stop" if="Xvfb_available">
		<echo>Stopping Xvfb with DISPLAY :${Xvfb-display-number} used as a dummy XServer</echo>
		<exec executable="pkill" os="Linux" inputstring="">
			<arg value="-f" />
			<arg value="Xvfb :${Xvfb-display-number}" />
		</exec>
		<sleep seconds="2" />  <!-- allow time to fully stop, otherwise if the next plugin uses Xvfb as well, tests may fail with weird X11 errors -->
	</target>

	<!-- Window manager when running headless under Linux (required for SWTBot) -->
	<target name="Metacity_check" unless="Metacity_check_done">
		<exec executable="which" osfamily="unix" resultproperty="which_Metacity_result" inputstring="">
			<arg value="metacity" />
		</exec>
		<condition property="Metacity_available">
			<and>
				<os family="unix" />
				<equals arg1="${which_Metacity_result}" arg2="0" />
			</and>
		</condition>
		<property name="Metacity_check_done" value="true" />
	</target>

	<target name="Metacity_start" depends="Metacity_check, Xvfb_start" if="Metacity_available">
		<echo>Starting metacity for DISPLAY :${Xvfb-display-number} to act as Window Manager for SWTBot tests</echo>
		<exec executable="metacity" spawn="true" os="Linux">
			<arg value="--display=:${Xvfb-display-number}" />
			<arg value="--replace" />
		</exec>
		<sleep seconds="2" />  <!-- allow time to initialize -->
	</target>

	<target name="Metacity_stop" if="Metacity_available">
		<echo>Stopping metacity for DISPLAY :${Xvfb-display-number} used as a Window Manager for SWTBot tests</echo>
		<exec executable="pkill" os="Linux" inputstring="">
			<arg value="-f" />
			<arg value="metacity --display=:${Xvfb-display-number}" />
		</exec>
		<sleep seconds="2" />  <!-- allow time to fully stop -->
	</target>

	<!-- use netstat to report on open ports when running under Linux -->
	<target name="_netstat_check" unless="netstat_check_done">
		<exec executable="which" osfamily="unix" resultproperty="which_netstat_result" inputstring="">
			<arg value="netstat" />
		</exec>
		<condition property="netstat_available">
			<and>
				<os family="unix" />
				<equals arg1="${which_netstat_result}" arg2="0" />
			</and>
		</condition>
		<property name="netstat_check_done" value="true" />
	</target>
	<target name="netstat_report" depends="_netstat_check" if="netstat_available">
		<exec executable="netstat" os="Linux" inputstring="">
			<arg value="-tlnp" />
		</exec>
	</target>
	<target name="netstat_report_again" depends="_netstat_check" if="netstat_available">
		<exec executable="netstat" os="Linux" inputstring="">
			<arg value="-tlnp" />
		</exec>
	</target>

	<!-- Java JUnit testing -->
	<macrodef name="junit-call" description="Invokes JUnit">
		<attribute name="description" default="" />
		<attribute name="dir" default="${plugin.basedir}" />
		<attribute name="report.dir" default="${plugin.basedir}/test-reports" />
		<attribute name="scratch.dir" default="${plugin.basedir}/test-scratch" />
		<attribute name="Xvfb-display-name" default="dummy.for.Xvfb-display-name" />
		<attribute name="Xvfb-display-number" default="dummy.for.Xvfb-display-number" />
		<attribute name="fork" default="on" />
		<attribute name="forkmode" default="perBatch" />
		<attribute name="maxmemory" default="1024m" />
		<attribute name="timeout" default="900000" />
		<attribute name="printSummary" default="on" />
		<attribute name="showoutput" default="true" />
		<attribute name="logfailedtests" default="true" />
		<attribute name="newenvironment" default="true" />
		<element name="junit-elements" implicit="yes" />
		<sequential>
			<echo-time message="Starting @{description} --->" />
			<echo>env ${java.library.path.name}=${java.library.path.value}</echo>
			<echo>env ${system.path.name}=${system.path.value}</echo>
			<delete dir="@{report.dir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
			<delete dir="@{scratch.dir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
			<mkdir dir="@{report.dir}" />
			<mkdir dir="@{scratch.dir}" />
			<junit dir="@{dir}"
				fork="@{fork}" forkmode="@{forkmode}" maxmemory="@{maxmemory}" timeout="@{timeout}" newenvironment="@{newenvironment}"
				printSummary="@{printSummary}" showoutput="@{showoutput}" logfailedtests="@{logfailedtests}">
				<env key="${system.path.name}" value="${system.path.value}" />
				<env key="${java.library.path.name}" value="${java.library.path.value}" />
				<!-- (effective on some Linux only) control memory alloction on RedHat 6 (See Jira DATAACQTEAM-50) -->
				<env key="MALLOC_ARENA_MAX" value="4" />
				<!-- (effective on some Linux only) set DISPLAY=:<value>, for tests which require an X-server -->
				<env key="@{Xvfb-display-name}" value=":@{Xvfb-display-number}" />
				<!-- (effective on Windows only) set SystemRoot=C:\Windows or similar, to avoid "Unrecognized Windows Sockets error: 10106: create" -->
				<env key="${SystemRootLiteral}" value="${SystemRoot}" />
				<!-- GDA assumes that the default encoding is UTF-8. Note that this is not usually the default under Windows.
				     If not running with UTF-8, then at a minimum some Nexus tests will fail (others might also). -->
				<env key="LANG" value="en_GB.UTF-8" />
				<jvmarg value="-Dfile.encoding=UTF-8" />
				<jvmarg value="-Dsun.jnu.encoding=UTF-8" />
				<!-- Use "-verbose:class" if you need to determine where classes are loaded from (produces a lot of output) -->
				<!-- <jvmarg value="-verbose:class" /> -->
				<syspropertyset>
					<propertyref name="java.io.tmpdir" />
					<propertyref name="GDALargeTestFilesLocation" />
					<propertyref name="uk.ac.diamond.jython.location" />
					<propertyref name="run.in.eclipse" />
					<propertyref prefix="org.dawnsci.python." />
				</syspropertyset>
				<junit-elements />
			</junit>
			<echo message="&lt;--- Finished @{description}" />
		</sequential>
	</macrodef>

	<!-- Jython testing -->
	<macrodef name="jython-call" description="Invokes Jython">
		<attribute name="description" default="" />
		<attribute name="dir" default="${plugin.basedir}" />
		<attribute name="report.dir" default="${plugin.basedir}/test-reports" />
		<attribute name="scratch.dir" default="${plugin.basedir}/test-scratch" />
		<attribute name="jython.file" />
		<attribute name="python.path" />
		<attribute name="fork" default="on" />
		<attribute name="maxmemory" default="1024m" />
		<attribute name="timeout" default="900000" />
		<attribute name="newenvironment" default="true" />
		<attribute name="resultproperty.name" default="jython_return_code_@{jython.file}" />  <!-- build property name dynamically so that we get a new name for each iteration -->
		<element name="jython-elements" implicit="yes" />
		<sequential>
			<echo-time message="Starting @{description} --->" />
			<echo>env ${java.library.path.name}=${java.library.path.value}</echo>
			<echo>env ${system.path.name}=${system.path.value}</echo>
			<mkdir dir="@{report.dir}" />
			<mkdir dir="@{scratch.dir}" />
			<java dir="@{dir}" fork="@{fork}" maxmemory="@{maxmemory}" timeout="@{timeout}" newenvironment="@{newenvironment}"
				classname="org.python.util.jython" failonerror="false" resultproperty="@{resultproperty.name}">
				<env key="${system.path.name}" value="${system.path.value}" />
				<!-- Note that setting LD_LIBRARY_PATH seems to be ignored, or ineffective.
				     It works for the junit task (see above), but not for the java task, nor for the exec task.
				     Numerous experiments have established this. -->
				<env key="${java.library.path.name}" value="${java.library.path.value}"/>
				<!-- (effective on some Linux only) control memory alloction on RedHat 6 (See Jira DATAACQTEAM-50) -->
				<env key="MALLOC_ARENA_MAX" value="4" />
				<!-- GDA assumes that the default encoding is UTF-8. Note that this is not usually the default under Windows.
				     If not running with UTF-8, then at a minimum some Nexus tests will fail (others might also). -->
				<env key="LANG" value="en_GB.UTF-8" />
				<jvmarg value="-Dfile.encoding=UTF-8" />
				<jvmarg value="-Dsun.jnu.encoding=UTF-8" />
				<arg line=" @{jython.file}" />
				<jvmarg value="-Dpython.path=@{python.path}" />
				<jython-elements />
			</java>
			<echo message="&lt;--- Finished @{description} (rc=${@{resultproperty.name}})" />
			<fail message="Jython invokation failed.">  <!-- if test harness failed (but not if individual tests failed) -->
				<condition>
					<equals arg1="${@{resultproperty.name}}" arg2="255" />
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<target name="tests-clean_impl" extensionOf="tests-clean">
		<delete dir="${plugin.basedir}/test-reports/" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<delete dir="${plugin.basedir}/test-scratch/" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<echo-time message="tests-clean completed in ${ant.project.name}" />
	</target>

</project>
