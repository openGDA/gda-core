/*-
 * Copyright Â© 2022 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.gda.client.live.stream.view.customui;

import static org.eclipse.ui.forms.widgets.ExpandableComposite.EXPANDED;
import static org.eclipse.ui.forms.widgets.ExpandableComposite.TITLE_BAR;
import static org.eclipse.ui.forms.widgets.ExpandableComposite.TWISTIE;
import static uk.ac.gda.client.live.stream.view.StreamViewUtility.displayAndLogError;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.dawnsci.plotting.AbstractPlottingSystem;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.layout.GridDataFactory;
import org.eclipse.jface.layout.GridLayoutFactory;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.Section;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import gda.device.detector.areadetector.v17.NDArray;
import uk.ac.gda.client.live.stream.LiveStreamConnection;
import uk.ac.gda.client.live.stream.LiveStreamConnectionBuilder;
import uk.ac.gda.client.live.stream.view.CameraConfiguration;
import uk.ac.gda.client.live.stream.view.LivePlottingComposite;
import uk.ac.gda.client.live.stream.view.StreamType;
import uk.ac.gda.client.livecontrol.LiveControl;

/**
 * a slave viewer to display additional {@link NDArray} stream generated by the same EPICS area detector.
 * This additional {@link NDArray} is created by camera IOC from raw live camera images - such as summation, accumulation, etc.
 *
 */
public class EpicsNDArrayStreamView extends AbstractLiveStreamViewCustomUi {

	private static final Logger logger = LoggerFactory.getLogger(EpicsNDArrayStreamView.class);

	private CameraConfiguration camConfig;
	private StreamType streamType;
	private int xSizeHint = 100;
	private int ySizeHint = 250;
	private String plotName;
	private List<LiveControl> liveControls = new ArrayList<>();

	@Override
	public void createUi(Composite parent) {
		FormToolkit toolkit = new FormToolkit(parent.getDisplay());
		Section section = toolkit.createSection(parent, EXPANDED | TWISTIE | TITLE_BAR);
		section.setText(plotName);
		section.setExpanded(true);
		section.setEnabled(true);
		section.setVisible(true);
		section.setLayout(GridLayoutFactory.fillDefaults().create());
		section.setLayoutData(GridDataFactory.fillDefaults().grab(true, false).create());
		// add addition live control of this NDArray if any
		Composite client = toolkit.createComposite(section, SWT.WRAP);
		client.setLayout(GridLayoutFactory.fillDefaults().numColumns(4).create());
		getLiveControls().stream().forEach(e -> e.createControl(client));

		if (camConfig == null) {
			displayAndLogError(logger, parent, "Camera configuration is not set!");
			return;
		}
		try {
			LiveStreamConnection liveStreamConnection = new LiveStreamConnectionBuilder(getCamConfig(), getStreamType()).buildAndConnect();
			LivePlottingComposite plottingComposite = new LivePlottingComposite(client, SWT.NONE, getPlotName(), null, liveStreamConnection, null);
			plottingComposite.setShowAxes(getCamConfig().getCalibratedAxesProvider() != null);
			plottingComposite.setShowTitle(true);
			plottingComposite.setLayoutData(GridDataFactory.fillDefaults().grab(true, true).hint(xSizeHint, ySizeHint).create());
			plottingComposite.activatePlottingSystem();
			createSectionToolbar(section, plottingComposite);
			toolkit.adapt(plottingComposite);
		} catch (Exception e) {
			displayAndLogError(logger, parent, "Could not create plotting view", e);
		}
		// add tool for spectrum plot local to the section
		section.setClient(client);
	}

	private void createSectionToolbar(Section control, LivePlottingComposite plottingComposite) {
		ToolBarManager toolBarManager1 = new ToolBarManager(SWT.FLAT);
		ToolBar toolbar = toolBarManager1.createControl(control);
		final Cursor handCursor = new Cursor(Display.getCurrent(), SWT.CURSOR_HAND);
		toolbar.setCursor(handCursor);
		// Cursor needs to be explicitly disposed
		toolbar.addDisposeListener(e -> handCursor.dispose());

		// get action bar so we have access to the default tool bar items created during plot creation
		AbstractPlottingSystem<?> system = (AbstractPlottingSystem<?>) plottingComposite.getPlottingSystem();
		IActionBars actionBars = system.getActionBars();

		IToolBarManager toolBarManager = actionBars.getToolBarManager();

//		// specify the tool bar items to be kept
		final List<String> toolBarItemIdsToKeep = Arrays.asList(
				"org.csstudio.swt.xygraph.autoscale",
				"org.dawb.common.ui.plot.tool",
				"org.dawb.workbench.plotting.histo",
				"org.dawb.plotting.system.aspectRatio",
				"org.dawnsci.plotting.system.preference.export",
				"org.eclipse.nebula.visualization.xygraph.figures.ZoomType");

		Arrays.stream(toolBarManager.getItems()).filter(ci -> ci.getId() == null || toolBarItemIdsToKeep.stream().noneMatch(ci.getId()::contains))
				.forEach(toolBarManager::remove);

		// add kept items to this section's tool bar
		Arrays.stream(toolBarManager.getItems()).forEach(e -> e.fill(toolbar, -1));
		control.setTextClient(toolbar);
	}


	public CameraConfiguration getCamConfig() {
		return camConfig;
	}

	public void setCamConfig(CameraConfiguration camConfig) {
		this.camConfig = camConfig;
	}

	public StreamType getStreamType() {
		return streamType;
	}

	public void setStreamType(StreamType streamType) {
		this.streamType = streamType;
	}

	public void setXSizeHint(int xSizeHint) {
		this.xSizeHint = xSizeHint;
	}

	public void setYSizeHint(int ySizeHint) {
		this.ySizeHint = ySizeHint;
	}

	public String getPlotName() {
		return plotName;
	}

	public void setPlotName(String plotName) {
		this.plotName = plotName;
	}

	public List<LiveControl> getLiveControls() {
		return liveControls;
	}

	public void setLiveControls(List<LiveControl> liveControls) {
		this.liveControls = liveControls;
	}


}
