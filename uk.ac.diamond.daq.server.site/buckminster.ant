<?xml version="1.0" encoding="UTF-8"?>
<project name="product builder" basedir=".">
    <description>
Additional Ant tasks for Buckminster build. Based on http://www.ralfebert.de/blog/eclipsercp/rcp_builds/, heavily modified at Diamond Light Source.
    </description>
    <import file="${buckminster.pdetasks}"/>

    <target name="set.action.datetime" unless="action.datetime">
        <tstamp>
            <format property="action.datetime" pattern="yyyyMMdd-HHmm" />
        </tstamp>
        <pathconvert property="action.date" setonempty="internal_error_with_action.date">
            <regexpmapper from="([0-9]{8})\-.*$$" to="\1"/>
            <path path="${action.datetime}" />
        </pathconvert>
        <echo message="Set action.datetime=${action.datetime}" />
    </target>

    <macrodef name="property.expand">
        <attribute name="property"/>
        <attribute name="definition"/>
        <sequential>
            <property name="@{property}" value="@{definition}"/>
        </sequential>
    </macrodef>

    <!-- ====================================================================================== -->
    <!--  Setup a directory, optionally including group and gid, IFF it does not already exist  -->
    <!-- ====================================================================================== -->

    <!--  Only call this using antcall, to allow reuse of properties  -->
    <target name="setup.directory" depends="_directory.check.params, _directory.delete, _directory.create, _directory.set.group">
    </target>
    <target name="_directory.check.params">
        <fail message="setup.directory called, but setup.directory.name not set" unless="setup.directory.name" />
        <condition property="directory.setup.skip">
            <available file="${setup.directory.name}" type="dir" />
        </condition>
    </target>
    <target name="_directory.delete" if="${setup.directory.delete.previous}">
        <delete dir="${setup.directory.name}" includeemptydirs="true" quiet="true" />
    </target>
    <target name="_directory.create" unless="directory.setup.skip">
        <mkdir dir="${setup.directory.name}"/>
    </target>
    <target name="_directory.set.group" if="${output.directory.group.set}" unless="directory.setup.skip">
        <chgrp file="${setup.directory.name}" type="dir" group="${output.directory.group}" />
        <chmod file="${setup.directory.name}" type="dir" perm="g+s" />
    </target>

    <!-- ============================== -->
    <!--  Install product from p2 site  -->
    <!-- ============================== -->

    <target name="get-product-description">
        <!-- We use the feature version as the product version -->
        <property name="feature.manifest" location="${sp:manifest}"/>
        <extractFeatureVersion file="${feature.manifest}" property="product.version.full"/>
        <pathconvert property="product.version.main" setonempty="true">
            <regexpmapper from="(\d+\.\d+\.\d+)\.?(.+)?" to="\1"/>
            <propertyset>
                <propertyref name="product.version.full" />
            </propertyset>
        </pathconvert>
        <pathconvert property="product.version.major.minor" setonempty="true">
            <regexpmapper from="(\d+\.\d+)\.\d+\.?(.+)?" to="\1"/>
            <propertyset>
                <propertyref name="product.version.full" />
            </propertyset>
        </pathconvert>
        <pathconvert property="product.version.qualifier" setonempty="true">
            <regexpmapper from="(\d+\.\d+\.\d+)\.?(.+)?" to="\2"/>
            <propertyset>
                <propertyref name="product.version.full" />
            </propertyset>
        </pathconvert>

        <!-- Some translations of product.os and product.arch -->
        <condition property="product.osname" value="linux">
            <equals arg1="${product.os}" arg2="linux" />
        </condition>
        <condition property="product.osname" value="windows">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>
        <condition property="product.osname" value="mac">
            <equals arg1="${product.os}" arg2="macosx" />
        </condition>
        <condition property="product.bits" value="32">
            <equals arg1="${product.arch}" arg2="x86" />
        </condition>
        <condition property="product.bits" value="64">
            <equals arg1="${product.arch}" arg2="x86_64" />
        </condition>
        <condition property="productIsWindows" value="true">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>

        <property name="destination.parent" location="${sp:destination.parent}"/>
        <property.expand property="destination.directory" definition="${product.directory.name}"/>
        <property name="destination" location="${destination.parent}/${destination.directory}"/>

    </target>

    <target name="make_product_dir">
        <fail message="ERROR: ${destination} already exists, but property product.directory.fail.if.already.exists=true was specified">
            <condition>
                <and>
                    <istrue value="${product.directory.fail.if.already.exists}" />
                    <available file="${destination}" type="dir" />
                </and>
            </condition>
        </fail>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${destination.parent}" />
        </antcall>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${destination}" />
            <param name="setup.directory.delete.previous" value="true" />
        </antcall>
    </target>

    <target name="install-product" depends="get-product-description, make_product_dir">
        <makeurl property="repository" file="${sp:repository}"/>

        <pathconvert property="equinox.launcher.jar">
            <first count="1">
                <sort>
                    <fileset dir="${eclipse.home}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                        <date />
                    </reverse>
                </sort>
            </first>
        </pathconvert>

        <echo message="buildfile   : ${ant.file}" />
        <echo message="ant         : version=${ant.version}, home=${ant.home}" />
        <echo message="launcher    : ${equinox.launcher.jar}" />
        <echo message="repository  : ${repository}" />
        <echo message="installIU   : ${iu}" />
        <echo message="version     : ${product.version.full}" />
        <echo message="target      : product.os=${product.os}, product.ws=${product.ws}, product.arch=${product.arch}" />
        <echo message="destination : ${destination}" />

        <!-- Set Java runtime args based on the Java version -->
        <condition property="jvmarg.gc" value="-XX:+DisableExplicitGC -XX:+UseG1GC -XX:MaxGCPauseMillis=2000" else="-XX:+DisableExplicitGC">
            <matches string="${java.version}" pattern="^1\.7\..*" />
        </condition>
        <condition property="jvmarg.gc" value="-XX:+DisableExplicitGC -XX:+UseG1GC -XX:MaxGCPauseMillis=2000" else="-XX:+DisableExplicitGC">
            <matches string="${java.version}" pattern="^1\.8\..*" />
        </condition>

        <echo message="java        : version=${java.version}, home=${java.home}, additional jvmarg=${jvmarg.gc}" />

        <java jar="${equinox.launcher.jar}" fork="true" maxmemory="1536m" failonerror="true" >
            <!-- (effective on some Linux only) control memory alloction on RedHat 6 (See Jira DATAACQTEAM-50) -->
            <env key="MALLOC_ARENA_MAX" value="4" />
            <!-- (probably not required) make sure that we live in a UTF-8 world -->
            <env key="LANG" value="en_GB.UTF-8" />
            <jvmarg value="-Dfile.encoding=UTF-8" />
            <jvmarg value="-Dsun.jnu.encoding=UTF-8" />
            <arg value="-application"/>
            <arg value="org.eclipse.equinox.p2.director"/>
            <arg value="-repository"/>
            <arg value="${repository}"/>
            <arg value="-destination"/>
            <arg value="${destination}"/>
            <arg value="-profile"/>
            <arg value="${profile}"/>
            <arg value="-profileProperties" />
            <arg value="org.eclipse.update.install.features=true" />
            <arg value="-installIU"/>
            <arg value="${iu}"/>
            <arg value="-p2.os" />
            <arg value="${product.os}" />
            <arg value="-p2.ws" />
            <arg value="${product.ws}" />
            <arg value="-p2.arch" />
            <arg value="${product.arch}" />
            <arg value="-roaming"/>
            <arg value="-consoleLog"/>
            <jvmarg line="${jvmarg.gc}"/>
            <!-- jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/ -->
        </java>
    </target>

    <!-- ========================================== -->
    <!--  Copy native library code to product root  -->
    <!-- ========================================== -->

    <target name="lib-copy" if="${lib.copy.requested}">
        <property name="lib_root" value="${destination}/lib" />
        <echo message="lib copy: copying selected libs to ${lib_root}" />
        <mkdir dir="${lib_root}" />
        <unjar dest="${lib_root}">
            <fileset dir="${sp:repository}/plugins" includes="${lib.copy.jars}" />
            <patternset>
                <include name="lib/${product.os}-${product.arch}/**"/>
            </patternset>
            <mapper type="glob" from="lib/${product.os}-${product.arch}/*" to="*"/>
        </unjar>
    </target>

    <!-- ======================================= -->
    <!--  Copy platform-specific JRE to product  -->
    <!-- ======================================= -->

    <target name="_jre-copy.set.environment">
        <!-- translate the OS name -->
        <condition property="jre.os" value="linux">
            <equals arg1="${product.os}" arg2="linux" />
        </condition>
        <condition property="jre.os" value="windows">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>
        <condition property="jre.os" value="macosx">
            <equals arg1="${product.os}" arg2="macosx" />
        </condition>

        <!-- translate the architecture description -->
        <condition property="jre.arch" value="i586">
            <equals arg1="${product.arch}" arg2="x86" />
        </condition>
        <condition property="jre.arch" value="x64">
            <equals arg1="${product.arch}" arg2="x86_64" />
        </condition>

        <!-- determine if JRE copy requested -->
        <condition property="jre.copy.requested" value="true">
            <and>
                <istrue value="${jre.include}" />
                <or>
                    <equals arg1="${jre.include.platforms}" arg2="all" />
                    <contains string="${jre.include.platforms}" substring="${jre.os}-${jre.arch}" />
                </or>
            </and>
        </condition>
    </target>

    <target name="_jre-copy.check.available" depends="_jre-copy.set.environment" if="jre.copy.requested">
        <!-- find the JRE (.tar.gz) to expand into the product -->
        <property.expand property="jre.archive.loc" definition="${jre.include.parent.loc}/${jre.include.release}"/>
        <property name="jre.archive.pattern" value="jre-*-${jre.os}-${jre.arch}.tar.gz" />
        <path id="jre.include.loc.id">
            <fileset dir="${jre.archive.loc}" includes="${jre.archive.pattern}" />
        </path>
        <condition property="jre.to.copy.available" value="true">
            <resourcecount refid="jre.include.loc.id" when="eq" count="1" />
        </condition>
        <property name="jre.include.loc" refid="jre.include.loc.id" />  <!-- turn the path into a property -->
        <condition property="useNativeTar" value="true">
            <and>
                <os family="unix" />
                <istrue value="${jre.to.copy.available}" />
            </and>
        </condition>
        <condition property="useAntTar.linux" value="true">
            <and>
                <isfalse value="${useNativeTar}" />
                <istrue value="${jre.to.copy.available}" />
                <equals arg1="${jre.os}" arg2="linux" />
            </and>
        </condition>
        <condition property="useAntTar.windows" value="true">
            <and>
                <isfalse value="${useNativeTar}" />
                <istrue value="${jre.to.copy.available}" />
                <equals arg1="${jre.os}" arg2="windows" />
            </and>
        </condition>
        <condition property="useAntTar.macosx" value="true">
            <and>
                <isfalse value="${useNativeTar}" />
                <istrue value="${jre.to.copy.available}" />
                <equals arg1="${jre.os}" arg2="macosx" />
            </and>
        </condition>
    </target>

    <target name="_jre-copy.UseNativeTar" if="useNativeTar" unless="jreUntarDone">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre using platform tar command" />
        <mkdir dir="${destination}/jre" />
        <exec executable="tar" osfamily="unix" dir="${destination}/jre" failonerror="true">
            <arg value="--strip-components=1" />  <!-- Required to remove the top-level directory in the .tar file -->
            <arg value="-zxf" />
            <arg value="${jre.include.loc}" />
            <arg value="-C" />
            <arg value="${destination}/jre" />
        </exec>
        <property name="jreUntarDone" value="true" />
    </target>

    <target name="_jre-copy.UseAntTar.linux" if="useAntTar.linux" unless="jreUntarDone">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre using ANT untar task" />
        <mkdir dir="${destination}/jre" />
        <untar src="${jre.include.loc}" dest="${destination}/jre" compression="gzip" failOnEmptyArchive="true">
            <regexpmapper from="^[^/]+/(.+)" to="\1"/>
            <!-- Required to remove the top-level directory in the .tar file -->
        </untar>
        <!-- Ant untar does not restore permissions, so we need to add the execute permission back on -->
        <echo message="JRE include: adding execute permission to ${destination}/jre/bin/*" />
        <chmod perm="ugo+x">
            <fileset dir="${destination}/jre">
                <include name="bin/*"/>
            </fileset>
        </chmod>
        <property name="jreUntarDone" value="true" />
    </target>

    <target name="_jre-copy.UseAntTar.windows" if="useAntTar.windows" unless="jreUntarDone">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre using ANT untar task" />
        <mkdir dir="${destination}/jre" />
        <untar src="${jre.include.loc}" dest="${destination}/jre" compression="gzip" failOnEmptyArchive="true">
            <regexpmapper from="^[^/]+/(.+)" to="\1"/>
            <!-- Required to remove the top-level directory in the .tar file -->
        </untar>
        <property name="jreUntarDone" value="true" />
    </target>

    <target name="_jre-copy.UseAntTar.macosx" if="useAntTar.macosx" unless="jreUntarDone">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre using ANT untar task" />
        <mkdir dir="${destination}/jre" />
        <untar src="${jre.include.loc}" dest="${destination}/jre" compression="gzip" failOnEmptyArchive="true">
            <regexpmapper from="^[^/]+/(.+)" to="\1"/>
            <!-- Required to remove the top-level directory in the .tar file -->
        </untar>
        <property name="jreUntarDone" value="true" />
    </target>

    <target name="jre-copy" depends="_jre-copy.check.available, _jre-copy.UseNativeTar, _jre-copy.UseAntTar.linux, _jre-copy.UseAntTar.windows, _jre-copy.UseAntTar.macosx" if="jre.copy.requested" unless="jreUntarDone">
        <echo message="JRE include: Could not find JRE to copy in ${jre.archive.loc}/ matching &quot;${jre.archive.pattern}&quot;" />
        <fail>
            <condition>
                <istrue value="${jre.include.fail.if.not.found}" />
            </condition>
        </fail>
        <echo message="JRE include: Skipping for ${jre.os}-${jre.arch}" />
    </target>

    <!-- ============================================================ -->
    <!--  Create a product (install from previously created p2 site)  -->
	<!--  Create/Update a symlink to the product (if action selected) -->
    <!-- ============================================================ -->

    <target name="create.product.setup">
        <!-- Invoked as a separate Buckminster action so that it runs BEFORE the site.p2 action -->
        <fail message="ERROR: product.parent.directory.location not set - did you remember to specify a .properties file?">
            <condition><not><isset property="product.parent.directory.location" /></not></condition>
        </fail>
        <!-- For buckminster.output.root and buckminster.temp.root, first create their immediate parent directories (if required)
             This ensures that _directory.set.group is applied to the immediate parent(s) if we needed to create them also
             This is a common case when buckminster.root.prefix is used, and needs to be created -->
        <dirname property="output.root.parent" file="${buckminster.output.root}" />
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${output.root.parent}" />
        </antcall>
        <dirname property="temp.root.parent" file="${buckminster.temp.root}" />
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${temp.root.parent}" />
        </antcall>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${buckminster.output.root}" />
            <param name="setup.directory.delete.previous" value="${buckminster.output.root.delete.previous}" />
        </antcall>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${buckminster.temp.root}" />
            <param name="setup.directory.delete.previous" value="${buckminster.temp.root.delete.previous}" />
        </antcall>
    </target>

    <!-- =================================================================== -->
    <!--  Set base paths relating to folder structure of installed OSGi app  -->
    <!-- =================================================================== -->
	
	<target name="set.path.properties">
    	<property.expand property="destination.directory.name" definition="${product.directory.name}"/>
    	<property.expand property="install.path" definition="${product.parent.directory.location}/${destination.directory.name}" />
    	<property.expand property="plugins.path" definition="${install.path}/plugins"/> 
    	<property.expand property="install.git.path" definition="${install.path}/dls-root/workspace_git"/>
    	<property name="ws_git.rel.path" value="../.."/>	
	</target>

    <!-- =============================================================== -->
    <!--  Get the names (including version) of the key required bundles  -->
    <!-- =============================================================== -->

	<target name="find.bundle.names" depends="set.path.properties">
    	<dirset  dir="${plugins.path}" id="coreDirId" >
    		<include name="uk.ac.gda.core_*"/>
    	</dirset>
    	<property name= "core.dir.name" refid= "coreDirId" />
    	<dirset  dir="${plugins.path}" id="jacorbDirId" >
    		<include name="uk.ac.diamond.org.jacorb_*"/>
    	</dirset>
    	<property name= "jacorb.dir.name" refid= "jacorbDirId" />
		<dirset  dir="${plugins.path}" id="springDirId" >
    		<include name="uk.ac.diamond.org.springframework_*"/>
    	</dirset>
    	<property name= "spring.dir.name" refid= "springDirId" />
	</target>

    <!-- ====================================================================== -->
    <!--  Create the OSGi product (install from previously created p2 site)     -->
	<!--  Create/Update a symlink to the product (used by the gda scripts)      -->
	<!--  Include the config and script details under a local dls-root          -->
	<!--  Create links within dls-root to cope with hard code paths in classes  -->
    <!-- ====================================================================== -->

	<target name="create.product" depends="set.action.datetime, install-product, lib-copy, jre-copy, find.bundle.names">
    	<!-- Links for sub process classpath entries -->
    	<property.expand property="core.link" definition="../../../../../plugins/${core.dir.name}"/>
    	<property.expand property="jacorb.link" definition="${plugins.path}/uk.ac.diamond.org.jacorb"/>
		<property.expand property="spring.framework.link" definition="${plugins.path}/uk.ac.diamond.org.springframework"/>

    	<!-- Add the links to cope with hard coded paths in the codebase -->
    	<mkdir dir="${install.path}/dls-root/workspace"/>
    	<mkdir dir="${install.git.path}/gda-core.git/uk.ac.gda.core/classes"/>
    	<symlink link="${install.git.path}/gda-core.git/uk.ac.gda.core/classes/main" resource="${core.link}" />
    	<symlink link="${jacorb.link}" resource="${jacorb.dir.name}" />
		<symlink link="${spring.framework.link}" resource="${spring.dir.name}" />

		<!-- Copy list of target platform bundles -->
		<copy tofile="${install.path}/configuration/target_platform_artifacts.xml">
			<fileset file="${workspace.root}/tp/artifacts.xml"></fileset>
		</copy>

		<!-- Copy across the config and diffcalc directories -->
		<copy todir="${install.git.path}/gda-core.git/core-config">
			<fileset dir="${ws_git.rel.path}/gda-core.git/core-config"/>
		</copy>
		<copy todir="${install.git.path}/gda-core.git/example-config">
			<fileset dir="${ws_git.rel.path}/gda-core.git/example-config"/>
		</copy>
		<copy todir="${install.git.path}/gda-diamond.git/dls-config">
			<fileset dir="${ws_git.rel.path}/gda-diamond.git/dls-config"/>
		</copy>
		<copy todir="${install.path}/utilities/diffcalc.git">
			<fileset dir="${ws_git.rel.path}/diffcalc.git">
				<exclude name="buckminster.*"/>
				<exclude name="*.pyc"/>
				<exclude name=".*"/>
				<exclude name=".*/*"/>
			</fileset>
		</copy>
		<copy todir="${install.git.path}/gda-epics.git/uk.ac.gda.epics">
			<fileset dir="${ws_git.rel.path}/gda-epics.git/uk.ac.gda.epics">
				<include name="schema/*"/>
			</fileset>
		</copy>
		<copy todir="${install.git.path}/daq-eclipse.git/org.eclipse.scanning.command/scripts">
			<fileset dir="${ws_git.rel.path}/daq-eclipse.git/org.eclipse.scanning.command/scripts"/>
		</copy>
		<!-- PES folders -->
		<!-- failonerror="false" is used here so that you can build the server wihtout having to have all
			the configs in your workspace. This measure should be temporary once dls-root is removed-->
		<copy todir="${install.git.path}/gda-pes.git/i05-1-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-pes.git/i05-1-config"/>
		</copy>
		<!-- XAS folders -->
		<copy todir="${install.git.path}/gda-dls-beamlines-xas.git/i18" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-dls-beamlines-xas.git/i18"/>
		</copy>
		<!-- MT beamline folders -->
		<copy todir="${install.git.path}/gda-mt.git/configurations/mt-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-mt.git/configurations/mt-config"/>
		</copy>
		<!-- I13-1 beamline folders -->
		<copy todir="${install.git.path}/gda-dls-beamlines-i13x.git/i13j" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-dls-beamlines-i13x.git/i13j"/>
		</copy>
		<!-- I15 beamline folders -->
		<copy todir="${install.git.path}/gda-mt.git/configurations/i15-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-mt.git/configurations/i15-config"/>
		</copy>
		<!-- I15-1 beamline folders -->
		<copy todir="${install.git.path}/gda-mt.git/configurations/i15-1-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-mt.git/configurations/i15-1-config"/>
		</copy>
		<!-- i02-2 VMXI beamline folders -->
		<copy todir="${install.git.path}/gda-mx.git/configurations/i02-2-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-mx.git/configurations/i02-2-config"/>
		</copy>
		<copy todir="${install.git.path}/gda-mx.git/configurations/mx-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-mx.git/configurations/mx-config"/>
		</copy>
		<!-- Test beamline folders -->
		<copy todir="${install.git.path}/gda-core.git/p45-config" failonerror="false">
			<fileset dir="${ws_git.rel.path}/gda-core.git/p45-config"/>
		</copy>	

        <echo>
== Product has been built in ${destination} ==
        </echo>
    </target>

	<target name="create.development-product" depends="create.product">
		<!-- execute the python script to scan for scriptlocation exetnsion points,
		build the correct version paths to delete and replace them with links -->
		<exec executable="python" failonerror="true">
			<arg line="devlinks.py ${plugins.path}"/>
		</exec>
	</target>

    <target name="_symlink.check.params">
        <fail message="create.product-with.symlink called, but symlink.to.product.location not set" unless="symlink.to.product.location" />
        <fail message="create.product-with.symlink called, but symlink.to.product.value not set" unless="symlink.to.product.value" />
        <property.expand property="symlink.to.product.target" definition="${symlink.to.product.value}"/>
    </target>

    <target name="remove_previous_product_symlink" depends="create.product, _symlink.check.params">
        <symlink action="delete" link="${symlink.to.product.location}"/>
    </target>

    <target name="remove_previous_development-product_symlink" depends="create.development-product, _symlink.check.params">
        <symlink action="delete" link="${symlink.to.product.location}"/>
    </target>

    <target name="create.product-with.symlink" depends="remove_previous_product_symlink">
        <symlink link="${symlink.to.product.location}" resource="${symlink.to.product.target}"/>
        <echo>
== Symlink to product created (or changed) at ${symlink.to.product.location} --> ${symlink.to.product.target} ==
        </echo>
    </target>

    <target name="create.development-product-with.symlink" depends="remove_previous_development-product_symlink">
        <symlink link="${symlink.to.product.location}" resource="${symlink.to.product.target}"/>
        <echo>
== Symlink to product created (or changed) at ${symlink.to.product.location} --> ${symlink.to.product.target} ==
        </echo>
    </target>

    <!-- ================================== -->
    <!--  Zip a previously created product  -->
    <!-- ================================== -->

    <target name="get-zip-environment" depends="get-product-description">
        <condition property="zip.file.name.OK" value="true">
            <and>
                <isset property="zip.file.name" />
                <length string="${zip.file.name}" trim="true" when="greater" length="3" />
            </and>
        </condition>
        <fail unless="zip.file.name.OK" message="Property zip.file.name was not set, but must be." />
        <condition property="zip.include.parent.directory.local" value="${zip.include.parent.directory-linux}">
            <and>
                <equals arg1="${product.os}" arg2="linux" />
                <isset property="zip.include.parent.directory-linux" />
            </and>
        </condition>
        <condition property="zip.include.parent.directory.local" value="${zip.include.parent.directory-windows}">
            <and>
                <equals arg1="${product.os}" arg2="win32" />
                <isset property="zip.include.parent.directory-windows" />
            </and>
        </condition>
        <condition property="zip.include.parent.directory.local" value="${zip.include.parent.directory-mac}">
            <and>
                <equals arg1="${product.os}" arg2="macosx" />
                <isset property="zip.include.parent.directory-mac" />
            </and>
        </condition>
        <condition property="zip.include.parent.directory.local" value="${zip.include.parent.directory}">  <!-- platform-independent value -->
            <isset property="zip.include.parent.directory" />
        </condition>
        <property name="zip.include.parent.directory.local" value="true" />  <!-- default value -->
        <condition property="useNativeZipIncludeParentDirectory" value="true">
            <and>
                <os family="unix" />
                <istrue value="${zip.include.parent.directory.local}" />
            </and>
        </condition>
        <condition property="useNativeZipExcludeParentDirectory" value="true">
            <and>
                <os family="unix" />
                <isfalse value="${zip.include.parent.directory.local}" />
            </and>
        </condition>
        <condition property="useAntZipIncludeParentDirectory" value="true">
            <and>
                <istrue value="${productIsWindows}" />
                <istrue value="${zip.include.parent.directory.local}" />
            </and>
        </condition>
        <condition property="useAntZipExcludeParentDirectory" value="true">
            <and>
                <istrue value="${productIsWindows}" />
                <isfalse value="${zip.include.parent.directory.local}" />
            </and>
        </condition>
    </target>

    <target name="create.product.zip" depends="get-zip-environment,
        _create.product.zip.IncludeParentDirectory.UseNativeZip, _create.product.zip.ExcludeParentDirectory.UseNativeZip,
        _create.product.zip.IncludeParentDirectory.UseAntZip, _create.product.zip.ExcludeParentDirectory.UseAntZip">
        <fail unless="zipDone" message="You cannot zip the product directory for platform ${product.os}-${product.ws}-${product.arch}. Ant zip does not does not preserve file permissions." />
    </target>

    <target name="_create.product.zip.IncludeParentDirectory.UseNativeZip" depends="get-zip-environment" if="useNativeZipIncludeParentDirectory" unless="zipDone">
        <property.expand property="destination.zipfile" definition="${zip.file.name}"/>
        <echo>Zipping ${destination} (including the directory) into ${destination.parent}/${destination.zipfile}.zip using platform zip command</echo>
        <exec executable="zip" osfamily="unix" dir="${destination.parent}" failonerror="true">
            <arg value="--quiet" />
            <arg value="--recurse-paths" />
            <arg value="--symlinks" />  <!-- Required since the MacOS product contains a symlink -->
            <arg value="--suffixes" />
            <arg value=".gif:.jar:.png" />
            <arg value="${destination.zipfile}.zip" />
            <arg value="${destination.directory}" />
        </exec>
        <property name="zipDone" value="true" />
    </target>

    <target name="_create.product.zip.ExcludeParentDirectory.UseNativeZip" depends="get-zip-environment" if="useNativeZipExcludeParentDirectory" unless="zipDone">
        <property.expand property="destination.zipfile" definition="${zip.file.name}"/>
        <echo>Zipping ${destination} (excluding the directory) into ${destination.parent}/${destination.zipfile}.zip using platform zip command</echo>
        <exec executable="zip" osfamily="unix" dir="${destination}" failonerror="true">
            <arg value="--quiet" />
            <arg value="--recurse-paths" />
            <arg value="--suffixes" />
            <arg value=".gif:.jar:.png" />
            <arg value="${destination.parent}/${destination.zipfile}.zip" />
            <arg value="." />
        </exec>
        <property name="zipDone" value="true" />
    </target>

    <target name="_create.product.zip.IncludeParentDirectory.UseAntZip" depends="get-product-description" if="useAntZipIncludeParentDirectory" unless="zipDone">
        <!-- Note the ANT zip does not preserve file permissions, so can't be used when zipping for Linux or Mac -->
        <property.expand property="destination.zipfile" definition="${zip.file.name}.zip"/>
        <echo>Zipping ${destination} (including the directory) into ${destination.parent}/${destination.zipfile} using ANT zip task</echo>
        <zip destfile="${destination.parent}/${destination.zipfile}.zip"
            keepcompression="true" defaultexcludes="no" whenempty="fail" duplicate="fail" level="6">
            <zipfileset dir="${destination.parent}/${destination.directory}" prefix="${destination.directory}" />
        </zip>
        <property name="zipDone" value="true" />
    </target>

    <target name="_create.product.zip.ExcludeParentDirectory.UseAntZip" depends="get-product-description" if="useAntZipExcludeParentDirectory" unless="zipDone">
        <!-- Note the ANT zip does not preserve file permissions, so can't be used when zipping for Linux or Mac -->
        <property.expand property="destination.zipfile" definition="${zip.file.name}"/>
        <echo>Zipping ${destination} (excluding the directory) into ${destination.parent}/${destination.zipfile} using ANT zip task</echo>
        <zip destfile="${destination.parent}/${destination.zipfile}.zip" basedir="${destination}"
            keepcompression="true" defaultexcludes="no" whenempty="fail" duplicate="fail" level="6" />
        <property name="zipDone" value="true" />
    </target>

</project>
