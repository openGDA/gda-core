/*-
 * Copyright Â© 2015 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.diamond.daq.mapping.ui.experiment;

import static java.util.stream.Collectors.toCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;

import org.eclipse.dawnsci.analysis.api.roi.IROI;
import org.eclipse.dawnsci.analysis.dataset.roi.CircularROI;
import org.eclipse.dawnsci.analysis.dataset.roi.LinearROI;
import org.eclipse.dawnsci.analysis.dataset.roi.PointROI;
import org.eclipse.dawnsci.analysis.dataset.roi.PolygonalROI;
import org.eclipse.dawnsci.analysis.dataset.roi.RectangularROI;
import org.eclipse.richbeans.api.generator.IGuiGeneratorService;
import org.eclipse.scanning.api.device.models.IDetectorModel;
import org.eclipse.scanning.api.event.scan.ProcessingRequest;
import org.eclipse.scanning.api.event.scan.ScanBean;
import org.eclipse.scanning.api.event.scan.ScanRequest;
import org.eclipse.scanning.api.points.MapPosition;
import org.eclipse.scanning.api.points.models.CompoundModel;
import org.eclipse.scanning.api.points.models.IMapPathModel;
import org.eclipse.scanning.api.points.models.IScanPathModel;
import org.eclipse.scanning.api.points.models.ScanRegion;
import org.eclipse.scanning.api.scan.models.ScanMetadata;
import org.eclipse.scanning.api.scan.models.ScanMetadata.MetadataType;
import org.eclipse.scanning.api.script.ScriptLanguage;
import org.eclipse.scanning.api.script.ScriptRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import gda.device.ScannableMotionUnits;
import gda.factory.Finder;
import uk.ac.diamond.daq.mapping.api.ConfigWrapper;
import uk.ac.diamond.daq.mapping.api.IMappingExperimentBean;
import uk.ac.diamond.daq.mapping.api.IMappingScanRegion;
import uk.ac.diamond.daq.mapping.api.IMappingScanRegionShape;
import uk.ac.diamond.daq.mapping.api.ISampleMetadata;
import uk.ac.diamond.daq.mapping.api.IScanDefinition;
import uk.ac.diamond.daq.mapping.api.IScanModelWrapper;
import uk.ac.diamond.daq.mapping.api.IScriptFiles;
import uk.ac.diamond.daq.mapping.impl.DetectorModelWrapper;
import uk.ac.diamond.daq.mapping.impl.MappingStageInfo;
import uk.ac.diamond.daq.mapping.impl.ScanPathModelWrapper;
import uk.ac.diamond.daq.mapping.impl.ScriptFiles;
import uk.ac.diamond.daq.mapping.impl.SimpleSampleMetadata;
import uk.ac.diamond.daq.mapping.region.CircularMappingRegion;
import uk.ac.diamond.daq.mapping.region.LineMappingRegion;
import uk.ac.diamond.daq.mapping.region.PointMappingRegion;
import uk.ac.diamond.daq.mapping.region.PolygonMappingRegion;
import uk.ac.diamond.daq.mapping.region.RectangularMappingRegion;

/**
 * A class to convert from a {@link IMappingExperimentBean} to a {@link ScanRequest} and
 * vica-versa, where:
 * <ul>
 *   <li>An {@link IMappingExperimentBean} is used to set-up a mapping bean and is directly
 *   manipulated in the Mapping Experiment Setup view, with many subcomponents modified with
 *   UI components generated by the {@link IGuiGeneratorService} for example;</li>
 *   <li> A {@link ScanRequest} used to define the scan to run by the GDA9 (aka solstice)
 *     scanning framework. Added to a {@link ScanBean} so that it can be run on the queue.</li>
 * </ul>
 */
public class ScanRequestConverter {

	private static final Logger logger = LoggerFactory.getLogger(ScanRequestConverter.class);

	public static final String FIELD_NAME_SAMPLE_NAME = "name";
	public static final String FIELD_NAME_SAMPLE_DESCRIPTION = "description";

	private MappingStageInfo mappingStageInfo;

	public void setMappingStageInfo(MappingStageInfo mappingStageInfo) {
		this.mappingStageInfo = mappingStageInfo;
	}

	/**
	 * Convert an IMappingExperimentBean to a ScanRequest so that it can be run by the
	 * GDA9 scanning framework.
	 * <p>
	 * This will include setting the mapping scan axes with the names from the mapping axis manager.
	 * <p>
	 * This method is made <code>public</code> to allow testing.
	 *
	 * @param mappingBean
	 *            the IMappingExperimentBean to be converted
	 * @return the ScanRequest
	 */
	public ScanRequest convertToScanRequest(IMappingExperimentBean mappingBean) {
		final ScanRequest scanRequest = new ScanRequest();

		final IMappingScanRegion scanRegion = mappingBean.getScanDefinition().getMappingScanRegion();
		final IMapPathModel mapPath = getMapPathAndConfigureScanAxes(scanRegion);

		// Build the list of models for the scan
		// first get the models for any outer scannables to be included
		final List<IScanPathModel> models = mappingBean.getScanDefinition().getOuterScannables().stream().
			filter(IScanModelWrapper<IScanPathModel>::isIncludeInScan).
			map(IScanModelWrapper<IScanPathModel>::getModel).
			filter(Objects::nonNull).
			collect(toCollection(ArrayList::new)); // use array list as we're going to add an element

		// then add the actual map path model last, it's the inner most model
		models.add(mapPath);

		// Convert the list of models into a compound model
		final CompoundModel compoundModel = new CompoundModel(models);

		// Add the ROI for the mapping region
		final ScanRegion region = new ScanRegion(scanRegion.getRegion().toROI(),
				mapPath.getxAxisName(), mapPath.getyAxisName());

		// Convert to a List of ScanRegion<IROI> containing one item to avoid unsafe varargs warning
		compoundModel.setRegions(Arrays.asList(region));

		// Set the model on the scan request
		scanRequest.setCompoundModel(compoundModel);

		// set the scan start position (scannables not in the scan that are set to a certain value before the scan starts)
		final Map<String, Object> beamlineConfiguration = mappingBean.getBeamlineConfiguration();
		if (beamlineConfiguration != null) {
			scanRequest.setStartPosition(new MapPosition(beamlineConfiguration));
		}

		// add the required detectors to the scan
		for (IScanModelWrapper<IDetectorModel> detectorWrapper : mappingBean.getDetectorParameters()) {
			if (detectorWrapper.isIncludeInScan()) {
				IDetectorModel detectorModel = detectorWrapper.getModel();
				scanRequest.putDetector(detectorModel.getName(), detectorModel);
			}
		}

		// set the per-scan and per-point monitors according to the mapping bean
		configureMonitors(mappingBean, scanRequest);

		// set the scripts to run before and after the scan, if any
		if (mappingBean.getScriptFiles() != null) {
			final IScriptFiles scriptFiles = mappingBean.getScriptFiles();
			scanRequest.setBeforeScript(createScriptRequest(scriptFiles.getBeforeScanScript()));
			scanRequest.setAfterScript(createScriptRequest(scriptFiles.getAfterScanScript()));
			scanRequest.setAlwaysRunAfterScript(scriptFiles.isAlwaysRunAfterScript());
		}

		// add the sample metadata
		if (mappingBean.getSampleMetadata() != null) {
			setSampleMetadata(mappingBean, scanRequest);
		}

		//Add required processing
		Map<String, Collection<Object>> processingRequest = mappingBean.getProcessingRequest();
		ProcessingRequest r = new ProcessingRequest();
		r.setRequest(processingRequest);
		scanRequest.setProcessingRequest(r);

		// Add template files
		List<String> templateFilePaths = mappingBean.getTemplateFilePaths();
		if (templateFilePaths != null && !templateFilePaths.isEmpty()) {
			Set<String> existingTemplateFilePaths = scanRequest.getTemplateFilePaths();
			final Set<String> allTemplateFilePaths = new TreeSet<>();
			Optional.ofNullable(existingTemplateFilePaths).ifPresent(allTemplateFilePaths::addAll);
			allTemplateFilePaths.addAll(templateFilePaths);
			scanRequest.setTemplateFilePaths(allTemplateFilePaths);
		}

		scanRequest.getTemplateFilePaths();

		return scanRequest;
	}

	private void configureMonitors(IMappingExperimentBean mappingBean, final ScanRequest scanRequest) {
		scanRequest.setMonitorNamesPerPoint(mappingBean.getPerPointMonitorNames());

		Set<String> perScanMonitorNames = mappingBean.getPerScanMonitorNames() == null ?
				new TreeSet<>() : new TreeSet<>(mappingBean.getPerScanMonitorNames());
	    if (mappingStageInfo.getBeamSize() != null) {
	    	perScanMonitorNames.add(mappingStageInfo.getBeamSize());
	    }
		scanRequest.setMonitorNamesPerScan(perScanMonitorNames);
	}

	private IMapPathModel getMapPathAndConfigureScanAxes(IMappingScanRegion scanRegion) {
		// check the scan path is an IMapPathModel
		if (!(scanRegion.getScanPath() instanceof IMapPathModel)) {
			final String message = "Could not set fast and slow axis. The scan path is not an instance of IMapPathModel.";
			logger.error(message);
			throw new IllegalArgumentException(message);
		}

		// get the fast and slow axis of the scan.
		final IMapPathModel mapPath = (IMapPathModel) scanRegion.getScanPath();
		if (mappingStageInfo != null) {
			// If the mapping stage is set, use these axis, and update the default map path with them
			String xAxisName = mappingStageInfo.getPlotXAxisName();
			String yAxisName = mappingStageInfo.getPlotYAxisName();
			mapPath.setxAxisName(xAxisName);
			mapPath.setyAxisName(yAxisName);

			ScannableMotionUnits xAxis = Finder.getInstance().find(xAxisName);
			Optional.ofNullable(xAxis).ifPresent(axis -> mapPath.setxAxisUnits(axis.getHardwareUnitString()));

			ScannableMotionUnits yAxis = Finder.getInstance().find(yAxisName);
			Optional.ofNullable(yAxis).ifPresent(axis -> mapPath.setyAxisUnits(axis.getHardwareUnitString()));
		} else {
			// Otherwise we use the default axis in the map path model
			logger.warn("No mapping axis manager is set - the scan request will use default axis names and uni!");
		}

		return mapPath;
	}

	private void setSampleMetadata(IMappingExperimentBean mappingBean, ScanRequest scanRequest) {
		final ISampleMetadata sampleMetadata = mappingBean.getSampleMetadata();
		String sampleName = sampleMetadata.getSampleName();
		if (sampleName == null || sampleName.trim().isEmpty()) {
			sampleName = "Unnamed Sample";
		}

		final ScanMetadata scanMetadata = new ScanMetadata(MetadataType.SAMPLE);
		scanMetadata.addField(FIELD_NAME_SAMPLE_NAME, sampleName);
		if (sampleMetadata instanceof SimpleSampleMetadata) {
			String description = ((SimpleSampleMetadata) sampleMetadata).getDescription();
			if (description == null || description.trim().isEmpty()) {
				description = "No description provided.";
			}
			scanMetadata.addField(FIELD_NAME_SAMPLE_DESCRIPTION, description);
		}
		scanRequest.setScanMetadata(Arrays.asList(scanMetadata));
	}

	private ScriptRequest createScriptRequest(String scriptFile) {
		if (scriptFile == null || scriptFile.isEmpty()) {
			return null;
		}

		final ScriptRequest scriptRequest = new ScriptRequest();
		scriptRequest.setLanguage(ScriptLanguage.SPEC_PASTICHE);
		scriptRequest.setFile(scriptFile);
		return scriptRequest;
	}

	/**
	 * Merge a scan request into an existing mapping bean so that it can be viewed
	 * and possibly modified in the Mapping Experiment Setup view.
	 * The reason for merging into an existing mapping bean is so that we don't remove
	 * detectors and processing steps that we not selected when this scan was run -
	 * when creating the scan request from the mapping bean a detector is only added if
	 * {@link IScanModelWrapper#isIncludeInScan()} is true. The mapping bean reconstructed
	 * from the scan request still needs to include this detector.
	 *
	 * @param scanRequest the {@link ScanRequest}
	 * @param mappingBean the {@link IMappingExperimentBean} to merge into
	 */
	public void mergeIntoMappingBean(ScanRequest scanRequest, IMappingExperimentBean mappingBean) {
		final CompoundModel compoundModel = scanRequest.getCompoundModel();
		final Collection<ScanRegion> regions = compoundModel.getRegions();
		if (regions.size() != 1) {
			throw new IllegalArgumentException("The scan request must have exactly one region, has " + regions.size());
		}

		// Check that the scannable names in the scan region are the same as in the mapping stage
		final IMapPathModel mapPath = checkMapModelAndUpdateMappingStage(compoundModel);

		// recreate the outer scannable wrappers from the scan request
		mergeOuterScannables(compoundModel, mappingBean);

		// set the scan path to the last child model of the compound model
		final IScanDefinition scanDefinition = mappingBean.getScanDefinition();
		final IMappingScanRegion scanRegion = scanDefinition.getMappingScanRegion();
		scanRegion.setScanPath(mapPath);

		// convert the ROI to a mapping scan region shape
		final ScanRegion region = regions.iterator().next();
		final IMappingScanRegionShape shape = convertROItoRegionShape(region.getRoi());
		scanRegion.setRegion(shape);

		// recreate the beamline configuration from the scan start position
		if (scanRequest.getStartPosition() != null) {
			mappingBean.setBeamlineConfiguration(new LinkedHashMap<>(scanRequest.getStartPosition().getValues()));
		}

		// recreate the detector models and processing steps (included in the same map of detectors in the scan request)
		mergeDetectorAndProcessing(scanRequest, mappingBean);

		// recreate the scripts to run before and after the scan, if any
		if (scanRequest.getBeforeScript() != null || scanRequest.getAfterScript() != null) {
			ScriptFiles scriptFiles = new ScriptFiles();
			if (scanRequest.getBeforeScript() != null) {
				scriptFiles.setBeforeScanScript(scanRequest.getBeforeScript().getFile());
			}
			if (scanRequest.getAfterScript() != null) {
				scriptFiles.setAfterScanScript(scanRequest.getAfterScript().getFile());
			}
			scriptFiles.setAlwaysRunAfterScript(scanRequest.isAlwaysRunAfterScript());
			mappingBean.setScriptFiles(scriptFiles);
		}

		// recreate the sample metadata from the metadata in the scan request
		mergeSampleMetadata(scanRequest, mappingBean);

		final Set<String> templateFilePaths = scanRequest.getTemplateFilePaths();
		mappingBean.setTemplateFilePaths(templateFilePaths == null ? null :
				new ArrayList<>(scanRequest.getTemplateFilePaths()));

		mergeProcessingRequest(scanRequest, mappingBean);
	}

	private void mergeProcessingRequest(ScanRequest scanRequest, IMappingExperimentBean mappingBean) {

		List<ConfigWrapper> pc = mappingBean.getProcessingConfigs();

		//disable all current
		for (ConfigWrapper w : pc) {
			w.setActive(false);
		}

		Map<String, Collection<Object>> pr = scanRequest.getProcessingRequest().getRequest();

		List<ConfigWrapper> newWrappers = new ArrayList<>();

		for (String k : pr.keySet()) {

			Object object = pr.get(k);

			if (object instanceof List<?>) {

				for(Object o :  (List<?>)object) {
					if (!found(pc,k,o.toString())) {
						ConfigWrapper w = new ConfigWrapper();
						w.setAppName(k);
						w.setPathToConfig(o.toString());
						w.setActive(true);
						newWrappers.add(w);
					}
				}
			}
		}

		if (!newWrappers.isEmpty()) {
			for (ConfigWrapper w : newWrappers) {
				mappingBean.addProcessingRequest(w);
			}
		}
	}

	private boolean found(List<ConfigWrapper> wrappers, String app, String path) {
		for (ConfigWrapper w : wrappers) {
			if (w.getAppName().contentEquals(app) && w.getPathToConfig().contentEquals(path)) {
				w.setActive(true);
				return true;
			}
		}
		return false;
	}

	private IMapPathModel checkMapModelAndUpdateMappingStage(final CompoundModel compoundModel) {
		final List<Object> models = compoundModel.getModels();
		// check that the inner most model is an IMapPathModel, i.e. for a mapping scan
		final Object innerModelObj = models.get(models.size() - 1);
		if (!(innerModelObj instanceof IMapPathModel)) {
			throw new IllegalArgumentException("The inner most model is not a map model. This is not mapping scan");
		}

		final IMapPathModel mapPath = (IMapPathModel) innerModelObj;

		// update the mapping bean with axes in the mapping path
		if (mappingStageInfo != null) {
			mappingStageInfo.setPlotXAxisName(mapPath.getxAxisName());
			mappingStageInfo.setPlotYAxisName(mapPath.getyAxisName());
		}

		return mapPath;
	}

	private IMappingScanRegionShape convertROItoRegionShape(IROI roi) {
		IMappingScanRegionShape regionShape;
		if (roi instanceof CircularROI) {
			regionShape = new CircularMappingRegion();
		} else if (roi instanceof LinearROI) {
			regionShape = new LineMappingRegion();
		} else if (roi instanceof PointROI) {
			regionShape = new PointMappingRegion();
		} else if (roi instanceof PolygonalROI) {
			regionShape = new PolygonMappingRegion();
		} else if (roi instanceof RectangularROI) {
			regionShape = new RectangularMappingRegion();
		} else {
			throw new IllegalArgumentException("Unable to convert ROI type " + roi.getClass());
		}

		regionShape.updateFromROI(roi);

		return regionShape;
	}

	private void mergeOuterScannables(CompoundModel compoundModel, IMappingExperimentBean mappingBean) {
		final List<IScanModelWrapper<IScanPathModel>> outerScannables = mappingBean.getScanDefinition().getOuterScannables();
		final List<Object> models = compoundModel.getModels();
		final List<Object> outerScannableModels = new ArrayList<>(models.subList(0, models.size() - 1));
		for (Object model : outerScannableModels) {
			if (!(model instanceof IScanPathModel)) {
				throw new IllegalArgumentException("Model is not an IScanPathModel: " + model);
			}
		}

		// We assume that models have the same name as the wrapper
		final Iterator<Object> modelIter = outerScannableModels.iterator();
		IScanPathModel currentModel =  modelIter.hasNext() ? (IScanPathModel) modelIter.next() : null;
		// iterate through the list of outer scannable wrappers to find the wrapper for the
		// current model. If we find a match, then we move on to the next model
		for (IScanModelWrapper<IScanPathModel> outerScannable : outerScannables) {
			if (currentModel == null || !outerScannable.getName().equals(currentModel.getName())) {
				// this outer scannable wrapper isn't in the scan request
				((ScanPathModelWrapper) outerScannable).setIncludeInScan(false);
			} else {
				// this is the wrapper for this model, set it enabled and overwrite its model
				// with the outer scannable model
				((ScanPathModelWrapper) outerScannable).setIncludeInScan(true);
				((ScanPathModelWrapper) outerScannable).setModel(currentModel);
				currentModel = modelIter.hasNext() ? (IScanPathModel) modelIter.next() : null;
			}
		}

		// We didn't find a wrapper for this model; let's create one
		if (currentModel != null) {
			IScanModelWrapper<IScanPathModel> wrapper = new ScanPathModelWrapper(currentModel.getName(), currentModel, true);
			List<IScanModelWrapper<IScanPathModel>> updatedOuterScannables = new ArrayList<>(outerScannables);
			updatedOuterScannables.add(wrapper);
			mappingBean.getScanDefinition().setOuterScannables(updatedOuterScannables);
		}
	}

	private void mergeDetectorAndProcessing(ScanRequest scanRequest, IMappingExperimentBean mappingBean) {
		// disable all the existing detectors in the mapping bean, also create a map of them by
		// detector name (note: the name in the IDetectorModel, not the name in the wrapper)
		final Map<String, IScanModelWrapper<IDetectorModel>> detectorModelWrappers;
		if (mappingBean.getDetectorParameters() == null) {
			detectorModelWrappers = Collections.emptyMap();
		} else {
			detectorModelWrappers = new HashMap<>(mappingBean.getDetectorParameters().size());
			for (IScanModelWrapper<IDetectorModel> detectorModelWrapper : mappingBean.getDetectorParameters()) {
				((DetectorModelWrapper) detectorModelWrapper).setIncludeInScan(false);
				detectorModelWrappers.put(detectorModelWrapper.getModel().getName(), detectorModelWrapper);
			}
		}

		// merge in the detectors and processing from the scan request. If there already is
		// a detector or processor with that name it is enabled and the model is replaced
		// with the model in the ScanRequest
		final Map<String, Object> detectorsAndProcessingMap = scanRequest.getDetectors();
		if (detectorsAndProcessingMap != null) {
			for (String name : detectorsAndProcessingMap.keySet()) {
				final Object model = detectorsAndProcessingMap.get(name);
				if (model instanceof IDetectorModel) {
					List<IScanModelWrapper<IDetectorModel>> detectorParams = mappingBean.getDetectorParameters();
					if (detectorParams == null) { // create the list of detector wrapper in the bean if not present
						detectorParams = new ArrayList<>(4);
						mappingBean.setDetectorParameters(detectorParams);
					}

					if (detectorModelWrappers.containsKey(name)) {
						// Get the wrapper for the detector. Set it to be included in the scan
						// and overwrite the model with the model in the scan request
						DetectorModelWrapper wrapper = (DetectorModelWrapper) detectorModelWrappers.get(name);
						wrapper.setIncludeInScan(true);
						wrapper.setModel((IDetectorModel) model);
					} else {
						// The scan includes an unknown detector. This can only occur if the mapping bean has changed in spring
						throw new IllegalArgumentException("Unknown detector " + name);
					}
				}
			}
		}
	}

	private void mergeSampleMetadata(ScanRequest scanRequest, IMappingExperimentBean mappingBean) {
		List<ScanMetadata> scanMetadata = scanRequest.getScanMetadata();
		if (scanMetadata == null) return;
		Optional<ScanMetadata> sampleScanMetadataOpt = scanMetadata.stream().filter(
				metadata -> metadata.getType() == MetadataType.SAMPLE).findFirst();
		if (!sampleScanMetadataOpt.isPresent()) return;
		ScanMetadata sampleScanMetadata = sampleScanMetadataOpt.get();

		SimpleSampleMetadata sampleMetadata = (SimpleSampleMetadata) mappingBean.getSampleMetadata();
		if (sampleMetadata == null) {
			sampleMetadata = new SimpleSampleMetadata();
			mappingBean.setSampleMetadata(sampleMetadata);
		}

		sampleMetadata.setSampleName((String) sampleScanMetadata.getFieldValue(FIELD_NAME_SAMPLE_NAME));
		sampleMetadata.setDescription((String) sampleScanMetadata.getFieldValue(FIELD_NAME_SAMPLE_DESCRIPTION));
	}
}
