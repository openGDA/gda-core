/*-
 * Copyright Â© 2020 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package gda.jython;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation to be added to static methods to make them available as Jython builtins.
 *
 * When used with {@link GdaBuiltin}, annotated functions will be combined by name and converted to PyObjects.
 * A docstring can be passed to the annotation and will be included in the generated help text. The signature
 * of the functions are generated by reflection so does not need to be included.
 * <p>
 * If a function is overloaded and this annotation is applied to more than one, all docstring values will be
 * concatenated so only one needs to be given. If individual functions need additional docs (when overloaded)
 * an overload value can be given. This will be added for docs of a specific function.
 * </p>
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface GdaJythonBuiltin {
	/** Docstring for the annotated function. If function is overloaded, docs are concatenated. */
	String docstring() default "";
	/** Docstring specific to this version of an overloaded function */
	String overload() default "";
}
