/*-
 * Copyright Â© 2020 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.gda.api.acquisition.configuration.calibration;

import static java.util.Objects.isNull;
import static org.hamcrest.CoreMatchers.containsString;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

public class DarkCalibrationDocumentTest {

	@Test
	public void deserialiseDarkCalibrationWithoutDetector()
	  throws IOException {

	    String json = "{\"numberExposures\":1,\"beforeAcquisition\":true}";
	    DarkCalibrationDocument document = new ObjectMapper().readerFor(DarkCalibrationDocument.class)
	      .readValue(json);

	    assertEquals(1, document.getNumberExposures(), 0);
	    assertTrue(document.isBeforeAcquisition());
	    assertFalse(document.isAfterAcquisition());
	    assertNull(document.getDetectorDocument());
	}

	@Test
	public void serialiseDarkCalibrationWithoutDetector()
	  throws IOException {

		DarkCalibrationDocument.Builder builder = new DarkCalibrationDocument.Builder();
		builder.withBeforeAcquisition(true);
		builder.withNumberExposures(2);

	    String json = new ObjectMapper().writeValueAsString(builder.build());

	    assertThat(json, containsString("\"numberExposures\":2"));
	    assertThat(json, containsString("\"beforeAcquisition\":true"));
	    assertThat(json, containsString("\"afterAcquisition\":false"));
	    assertThat(json, containsString("\"detectorDocument\":null"));
	}

	/**
	 * Not invoking {@link DarkCalibrationDocument.Builder#withDetectorDocument(uk.ac.gda.api.acquisition.parameters.DetectorDocument)}
	 * generates a {@code DarkCalibrationDocument} equivalent to those generated by a builder invoked with
	 * {@code DarkCalibrationDocument.Builder#withDetectorDocument(null)}
	 */
	@Test
	public void darkCalibrationWithoutDetectorTest() {
		DarkCalibrationDocument documentNoDetector = new DarkCalibrationDocument.Builder()
				.build();
		DarkCalibrationDocument documentNullDetector = new DarkCalibrationDocument.Builder()
				.withDetectorDocument(null)
				.build();

		assertTrue(isNull(documentNoDetector.getDetectorDocument())
				&& isNull(documentNullDetector.getDetectorDocument()));
	}
}
